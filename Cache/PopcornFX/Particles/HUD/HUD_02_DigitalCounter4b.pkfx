Version = 1.9.0.26281;
CParticleEffect	$LOCAL$/Resource
{
	EditorInfosPosition = int2(73, 52);
	OnSpawn = "$LOCAL$/Spawner";
	CustomAttributes = "$LOCAL$/_GlobalAttributes";
	Autostart = true;
}
CNEdEditorParticle_Data	$LOCAL$/EDITOR
{
	EditorInfosPosition = int2(413, -144);
	Position = float3(-4.4926904e-002, 3.6164516e-001, 1.3347722e+000);
	EulerOrientation = float3(-3.8498974e-001, -2.8490496e+000, 0.0000000e+000);
	Backdrops = "$LOCAL$/_BackdropList";
	ShowGrid = true;
}
CActionFactoryParticleSpawnerBase	$LOCAL$/SignedFloatingPoint
{
	EditorInfosPosition = int2(-288, -61);
	Descriptor = "$LOCAL$/CParticleDescriptor_AE135B2A";
	DurationInSeconds = 1.0000000e-003;
	SpawnCountMode = TotalParticleCount;
	SpawnCount = 7.2000000e+003;
	FirstSpawnDelay = 5.0000000e-001;
}
CParticleDescriptor	$LOCAL$/CParticleDescriptor_AE135B2A
{
	EditorInfosPosition = int2(-392, -44);
	Renderer = "$LOCAL$/CParticleRenderer_Billboard_6B12D2BB";
	CustomFields = 
	{
		"$LOCAL$/CParticleFieldDeclaration_D2F8C065",
		"$LOCAL$/CParticleFieldDeclaration_2355848C",
		"$LOCAL$/CParticleFieldDeclaration_7D272500",
		"$LOCAL$/CParticleFieldDeclaration_794D6F8B",
	};
	SpawnEvaluator = "$LOCAL$/CCompilerSyntaxNodeExpression_5566F5E7";
	States = 
	{
		"$LOCAL$/CParticleState_3AF8190E",
	};
}
CActionFactoryWithChilds	$LOCAL$/Spawner
{
	EditorInfosPosition = int2(-162, -81);
	ChildList = 
	{
		"$LOCAL$/SignedFloatingPoint",
		"$LOCAL$/SignedFloatingPoint_Optimized",
	};
}
CParticleRenderer_Billboard	$LOCAL$/CParticleRenderer_Billboard_6B12D2BB
{
	Diffuse = "Textures/FX/TextAtlas.dds";
	AtlasDefinition = "Textures/FX/TextAtlas.pkat";
	BillboardMode = PlanarAlignedQuad;
	AxisField = "AxisUp";
	Axis2Field = "AxisNormal";
	AxisScale = 5.0000000e-001;
}
CCompilerSyntaxNodeExpression	$LOCAL$/CCompilerSyntaxNodeExpression_5566F5E7
{
	EditorInfosPosition = int2(-508, 22);
	Expression = "function void	Eval()
{
	// we\'re displaying:
	// 1 for the sign
	// 4 digits for the integer part
	// 1 for the decimal point
	// 2 for the fraction
	float	particlesPerBlock = 1 + 4 + 1 + 3;
	
	float	spawnCount = 7200;	// same value as in the \'SpawnCount\' property of the layer
	float	particlePerLayer = particlesPerBlock*8;
	float	layerCount = spawnCount / particlePerLayer;
	float	rawParticleId = floor(spawner.LifeRatio * spawnCount);
	float	layer = floor(rawParticleId / particlePerLayer);
	float	particleId = rawParticleId - layer * particlePerLayer;
	
	float	block = floor(particleId / particlesPerBlock);
	float	digitId = particleId - block * particlesPerBlock - 1;

	BlockAndDigit = float2(block, digitId);
	
	Life = infinity;
	Size = 0.1;
	TextureID = 0;
	
	AxisUp = scene.axisUp();
	AxisNormal = scene.axisForward();
	
	float	atlasRectAspect = 0.5;	// the texture rects witchs are half the heights. (Matches the \'AxisScale\' property of the planar billboarder)
	Position = float3(digitId * Size * atlasRectAspect + 0.1, block * Size, layer*-0.015);
	
	float	a = (pow(1 - saturate(layer / layerCount),4) * 0.998 + 0.002) * 0.08;
	Color = select(float4(1,1,1,a), float4(8,1,1,1), layer == 0);
}
";
}
CParticleState	$LOCAL$/CParticleState_3AF8190E
{
	EditorInfosPosition = int2(-508, 65);
	StateName = "State_0";
	Evolvers = 
	{
		"$LOCAL$/Script_1",
	};
}
CParticleAttributeDeclaration	$LOCAL$/CParticleAttributeDeclaration_1614ECAE
{
	AttributeName = "ValueBatch1";
	AttributeType = float4;
	DefaultValueF4 = float4(-3.4473940e+003, 1.4195150e+003, 9.3594385e+003, -4.6797482e+001);
	HasMin = true;
	HasMax = true;
	MinValueF4 = float4(-9.9990000e+003, -9.9990000e+003, -9.9990000e+003, -9.9990000e+003);
	MaxValueF4 = float4(9.9990000e+003, 9.9990000e+003, 9.9990000e+003, 9.9990000e+003);
	MaxValueI4 = int4(10, 10, 10, 10);
}
CCompilerSyntaxNodeExpression	$LOCAL$/CCompilerSyntaxNodeExpression_19089209
{
	Expression = "function void	Eval()
{
	float2	blockAndDigit = BlockAndDigit;
	float4	blockId = blockAndDigit.x;
	float	digitId = blockAndDigit.y;

	// extract value from the 8 values stored in the two float4 attributes:
	float4	batchSelector0 = (blockId == float4(0,1,2,3));
	float4	batchSelector1 = (blockId == float4(4,5,6,7));
	float	signedValue = -(dot(ValueBatch0, batchSelector0) + dot(ValueBatch1, batchSelector1));
	float	value = abs(signedValue);
	
	// extract digit in the [0, 9] range
	float4	decimalSelector = (digitId == float4(0,1,2,3));	// up to 4 integer digits
	float	decimalDigit = dot(value / float4(10000, 1000, 100, 10), decimalSelector);
	float4	fracSelector = (digitId == float4(8,7,6,5));	// up to 4 fractional digits
	float	fracDigit = dot(value * float4(1000, 100, 10, 1), fracSelector);
	float	digit = floor(-10 * frac(decimalDigit + fracDigit));
	
	// compute digit count to know if we need to display the digit or not
	// (if it\'s one of the left digits equal to zero)
	float4	digitCountSelector = (value >= float4(-1, 10, 100, 1000));	// -1 : display zero
	float	digitCount = dot(digitCountSelector, digitCountSelector);

	// map digit to TextureID, and handle special characters \'.\' and \'-\'
	float	subUV = select(\'0\' + digit, \'.\', digitId == 4);	// digit or \'.\' character
	TextureID = select(	select(\' \', subUV, (4 - digitId <= digitCount)),
						select(\' \', \'-\', signedValue < 0),	// \'-\' character
						digitId == 3 - digitCount) - \' \';
}
";
}
CParticleAttributeList	$LOCAL$/_GlobalAttributes
{
	EditorInfosPosition = int2(-599, -20);
	AttributeList = 
	{
		"$LOCAL$/CParticleAttributeDeclaration_5C4C877F",
		"$LOCAL$/CParticleAttributeDeclaration_1614ECAE",
	};
}
CNEdEditorBackdrop_List	$LOCAL$/_BackdropList
{
	EditorInfosPosition = int2(125, -433);
	BackgroundLayers2D = 
	{
		"$LOCAL$/CNEdEditorBackdrop_Brush_9A913525",
	};
}
CNEdEditorBackdrop_Brush	$LOCAL$/CNEdEditorBackdrop_Brush_9A913525
{
	EditorInfosPosition = int2(-27, -485);
	LayerName = "Layer_Brush";
}
CParticleFieldDeclaration	$LOCAL$/CParticleFieldDeclaration_7D272500
{
	FieldName = "BlockAndDigit";
	FieldType = float2;
}
CParticleEvolver_Script	$LOCAL$/Script_1
{
	Expression = "$LOCAL$/CCompilerSyntaxNodeExpression_19089209";
}
CParticleFieldDeclaration	$LOCAL$/CParticleFieldDeclaration_2355848C
{
	FieldName = "AxisNormal";
	FieldType = float3;
	TransformFilter = rotate;
}
CParticleFieldDeclaration	$LOCAL$/CParticleFieldDeclaration_D2F8C065
{
	FieldName = "AxisUp";
	FieldType = float3;
	TransformFilter = rotate;
}
CParticleAttributeDeclaration	$LOCAL$/CParticleAttributeDeclaration_5C4C877F
{
	AttributeName = "ValueBatch0";
	AttributeType = float4;
	DefaultValueF4 = float4(-8.8914679e+002, 7.3939570e+003, 4.9917012e+003, 2.0278770e+002);
	HasMin = true;
	HasMax = true;
	MinValueF4 = float4(-9.9990000e+003, -9.9990000e+003, -9.9990000e+003, -9.9990000e+003);
	MaxValueF4 = float4(9.9990000e+003, 9.9990000e+003, 9.9990000e+003, 9.9990000e+003);
	MaxValueI4 = int4(10, 10, 10, 10);
}
CParticleFieldDeclaration	$LOCAL$/CParticleFieldDeclaration_794D6F8B
{
	FieldName = "Color";
	FieldType = float4;
}
CParticleDescriptor	$LOCAL$/CParticleDescriptor_F84D0D57
{
	EditorInfosPosition = int2(-392, -44);
	Renderer = "$LOCAL$/CParticleRenderer_Billboard_B6327B66";
	CustomFields = 
	{
		"$LOCAL$/CParticleFieldDeclaration_44F16B21",
		"$LOCAL$/CParticleFieldDeclaration_B69DE7F8",
		"$LOCAL$/CParticleFieldDeclaration_523E2A1B",
		"$LOCAL$/CParticleFieldDeclaration_A62BB57A",
		"$LOCAL$/CParticleFieldDeclaration_9A01ACA0",
	};
	SpawnEvaluator = "$LOCAL$/CCompilerSyntaxNodeExpression_7E6B64C5";
	States = 
	{
		"$LOCAL$/CParticleState_FD90D06C",
	};
}
CParticleRenderer_Billboard	$LOCAL$/CParticleRenderer_Billboard_B6327B66
{
	Diffuse = "Textures/FX/TextAtlas.dds";
	AtlasDefinition = "Textures/FX/TextAtlas.pkat";
	BillboardMode = PlanarAlignedQuad;
	AxisField = "AxisUp";
	Axis2Field = "AxisNormal";
	AxisScale = 5.0000000e-001;
}
CParticleFieldDeclaration	$LOCAL$/CParticleFieldDeclaration_44F16B21
{
	FieldName = "AxisUp";
	FieldType = float3;
	TransformFilter = rotate;
}
CParticleFieldDeclaration	$LOCAL$/CParticleFieldDeclaration_B69DE7F8
{
	FieldName = "AxisNormal";
	FieldType = float3;
	TransformFilter = rotate;
}
CParticleFieldDeclaration	$LOCAL$/CParticleFieldDeclaration_523E2A1B
{
	FieldName = "BlockAndDigit";
	FieldType = float2;
}
CParticleFieldDeclaration	$LOCAL$/CParticleFieldDeclaration_A62BB57A
{
	FieldName = "Color";
	FieldType = float4;
}
CCompilerSyntaxNodeExpression	$LOCAL$/CCompilerSyntaxNodeExpression_7E6B64C5
{
	EditorInfosPosition = int2(-508, 22);
	Expression = "function void	Eval()
{
	// we\'re displaying:
	// 1 for the sign
	// 4 digits for the integer part
	// 1 for the decimal point
	// 2 for the fraction
	float	particlesPerBlock = 1 + 4 + 1 + 3;
	
	float	spawnCount = 7200;	// same value as in the \'SpawnCount\' property of the layer
	float	particlePerLayer = particlesPerBlock*8;
	float	layerCount = spawnCount / particlePerLayer;
	float	rawParticleId = floor(spawner.LifeRatio * spawnCount);
	float	layer = floor(rawParticleId / particlePerLayer);
	float	particleId = rawParticleId - layer * particlePerLayer;
	
	float	block = floor(particleId / particlesPerBlock);
	float	digitId = particleId - block * particlesPerBlock - 1;

	BlockAndDigit = float2(block, digitId);
	
	float4	decimalSelector = (digitId == float4(0,1,2,3));	// up to 4 integer digits
	float	decimalDigit = dot(1 / float4(10000, 1000, 100, 10), decimalSelector);
	float4	fracSelector = (digitId == float4(8,7,6,5));	// up to 4 fractional digits
	float	fracDigit = dot(1 * float4(1000, 100, 10, 1), fracSelector);
	
	DigitFactor = fracDigit + decimalDigit;
	
	Life = infinity;
	Size = 0.1;
	TextureID = 0;
	
	AxisUp = scene.axisUp();
	AxisNormal = scene.axisForward();
	
	float	atlasRectAspect = 0.5;	// the texture rects witchs are half the heights. (Matches the \'AxisScale\' property of the planar billboarder)
	Position = float3(digitId * Size * atlasRectAspect - 0.4, block * Size, layer*-0.015);
	
	float	a = (pow(1 - saturate(layer / layerCount),4) * 0.998 + 0.002) * 0.08;
	Color = select(float4(1,1,1,a), float4(1,5,1,1), layer == 0);
}
";
}
CParticleState	$LOCAL$/CParticleState_FD90D06C
{
	EditorInfosPosition = int2(-508, 65);
	StateName = "State_0";
	Evolvers = 
	{
		"$LOCAL$/CParticleEvolver_Script_A722419F",
	};
}
CParticleEvolver_Script	$LOCAL$/CParticleEvolver_Script_A722419F
{
	Expression = "$LOCAL$/CCompilerSyntaxNodeExpression_9E02214E";
}
CCompilerSyntaxNodeExpression	$LOCAL$/CCompilerSyntaxNodeExpression_9E02214E
{
	Expression = "function void	Eval()
{
	float2	blockAndDigit = BlockAndDigit;
	float4	blockId = blockAndDigit.x;
	float	digitId = blockAndDigit.y;
	
	// extract value from the 8 values stored in the two float4 attributes:
	float4	batchSelector0 = (blockId == float4(0,1,2,3));
	float4	batchSelector1 = (blockId == float4(4,5,6,7));
	float	signedValue = -(dot(ValueBatch0, batchSelector0) + dot(ValueBatch1, batchSelector1));
	float	value = abs(signedValue);

	// extract digit in the [0, 9] range
	float	digit = floor(-10 * frac(value * DigitFactor));
	
	// compute digit count to know if we need to display the digit or not
	// (if it\'s one of the left digits equal to zero)
	float4	digitCountSelector = (value >= float4(-1, 10, 100, 1000));	// -1 : display zero
	float	digitCount = dot(digitCountSelector, digitCountSelector);
	
	// map digit to TextureID, and handle special characters \'.\' and \'-\'
	float	charDigit = digit + \'0\' - \' \';	// \'0\' is TextureID 16
	float	charDecimalPoint = \'.\' - \' \';	// \'.\' is TextureID 14
	float	charNegative = \'-\' - \' \';		// \'-\' is TextureID 13
	float	charEmpty = \' \' - \' \';			// \' \' is TextureID 0

	int		isDecimalPoint = (digitId == 4);
	int		isInNumber = (4 - digitId <= digitCount);
	int		isSignDigit = (digitId == 3 - digitCount) && (signedValue < 0);
	
	float	charInside = select(charDigit, charDecimalPoint, isDecimalPoint);
	float	charOutside = select(charEmpty, charNegative, isSignDigit);
	TextureID = select(charOutside, charInside, isInNumber);
}
";
}
CActionFactoryParticleSpawnerBase	$LOCAL$/SignedFloatingPoint_Optimized
{
	EditorInfosPosition = int2(-288, -61);
	Descriptor = "$LOCAL$/CParticleDescriptor_F84D0D57";
	DurationInSeconds = 1.0000000e-003;
	SpawnCountMode = TotalParticleCount;
	SpawnCount = 7.2000000e+003;
	FirstSpawnDelay = 5.0000000e-001;
}
CParticleFieldDeclaration	$LOCAL$/CParticleFieldDeclaration_9A01ACA0
{
	FieldName = "DigitFactor";
}
