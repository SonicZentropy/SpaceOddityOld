Version = 1.9.0.26281;
CParticleEffect	$LOCAL$/Resource
{
	EditorInfosPosition = int2(73, 52);
	OnSpawn = "$LOCAL$/Spawner";
	CustomAttributes = "$LOCAL$/_GlobalAttributes";
	Autostart = true;
}
CNEdEditorParticle_Data	$LOCAL$/EDITOR
{
	EditorInfosPosition = int2(413, -144);
	Position = float3(4.1719413e+000, -7.3575044e-001, 1.0310680e+001);
	EulerOrientation = float3(-2.0096952e+001, -1.2781993e+001, 0.0000000e+000);
	Backdrops = "$LOCAL$/_BackdropList";
	IsLooping = true;
	LoopDelay = 5.0000000e+000;
}
CActionFactoryParticleSpawnerBase	$LOCAL$/Layer_1
{
	EditorInfosPosition = int2(-288, -61);
	Descriptor = "$LOCAL$/CParticleDescriptor_AE135B2A";
	DurationInSeconds = 2.0000000e+000;
	SpawnCountMode = TotalParticleCount;
	SpawnCount = 1.0000000e+003;
	FirstSpawnDelay = 5.0000000e-001;
}
CParticleDescriptor	$LOCAL$/CParticleDescriptor_AE135B2A
{
	EditorInfosPosition = int2(-392, -44);
	CustomFields = 
	{
		"$LOCAL$/CParticleFieldDeclaration_ADEBF635",
		"$LOCAL$/CParticleFieldDeclaration_3985D6D3",
	};
	SpawnEvaluator = "$LOCAL$/CCompilerSyntaxNodeExpression_5566F5E7";
	States = 
	{
		"$LOCAL$/CParticleState_3AF8190E",
	};
}
CActionFactoryWithChilds	$LOCAL$/Spawner
{
	EditorInfosPosition = int2(-162, -81);
	ChildList = 
	{
		"$LOCAL$/Layer_1",
	};
}
CParticleFieldDeclaration	$LOCAL$/CParticleFieldDeclaration_3985D6D3
{
	FieldName = "LineID";
	FieldType = int;
}
CCompilerSyntaxNodeExpression	$LOCAL$/CCompilerSyntaxNodeExpression_5566F5E7
{
	EditorInfosPosition = int2(-508, 22);
	Expression = "function void	Eval()
{
	Size = 0.1;

	int	particleId = int(spawner.LifeRatio * 1000);
	int	lineCount = Text.lineCount();
	int	charCount = Text.charCount(particleId);	// # of chars at line \'particleId\'
	
//	int charCode = Text.charCode(particleId);

	Life = select(0.0, 1.0, particleId < lineCount && charCount != 0);	// kill space particles
	LineID = particleId;
//	CharID = particleId;
//	TextureID = max(0, min(charCode - 32, 126 - 32));
	
//	AxisSide = float3(0,-1,0);
//	AxisNormal = float3(0,0,2);
	
	Position = float3(0, -2 * Size * particleId, 0);
}
";
}
CParticleState	$LOCAL$/CParticleState_3AF8190E
{
	EditorInfosPosition = int2(-508, 65);
	StateName = "State_0";
	Evolvers = 
	{
		"$LOCAL$/CharLineTrail",
	};
}
CParticleSamplerText	$LOCAL$/CParticleSamplerText_D7C694F3
{
	SamplerName = "Text";
	DataSource = External;
	InlineText = "Bacon ipsum dolor amet turducken in velit nisi drumstick. Consequat pancetta exercitation aliqua dolore sirloin, hamburger quis ham kielbasa swine strip steak. Pancetta flank prosciutto laborum ribeye hamburger deserunt, boudin dolor tail tenderloin labore. Sirloin chuck spare ribs, duis hamburger occaecat fugiat laboris sausage meatball non. Ribeye pig dolor ad consequat in pork loin ea in rump alcatra cow. In corned beef kielbasa pork belly. Turkey ribeye ex capicola filet mignon et nostrud elit dolor.\\nPicanha chicken irure short loin aliquip. Incididunt dolore corned beef duis eiusmod adipisicing. Ribeye bresaola beef ribs meatloaf landjaeger cupidatat mollit ham aliqua ball tip aute nostrud in. Boudin rump ea magna ullamco. Exercitation adipisicing beef, jerky minim ut reprehenderit consequat ipsum velit. Corned beef consequat swine short ribs quis.\\nFlank aliqua adipisicing officia, ad spare ribs tongue fatback. Dolore quis ut tenderloin, esse in andouille sint jowl commodo. Corned beef hamburger pastrami duis shank dolore cupidatat exercitation bacon. Tongue beef consectetur, ipsum dolore officia drumstick fatback capicola short ribs boudin ut aliqua. Voluptate alcatra ham hock, laborum ball tip ut cupim pancetta salami prosciutto meatloaf ipsum ut brisket doner. Corned beef dolore magna sed in et jerky. Reprehenderit sirloin anim veniam.\\nAlcatra salami chuck dolore. Adipisicing dolore aliqua shankle, commodo meatloaf lorem excepteur pork loin aliquip. Lorem pastrami tongue irure reprehenderit aliqua. Ut velit frankfurter ribeye ham hock sunt. Ut quis laborum do pig labore jerky leberkas dolore velit fatback exercitation.\\nSirloin meatball esse, lorem ham exercitation velit pancetta venison cupidatat spare ribs tail pariatur. Prosciutto nostrud eu, ut capicola cow veniam pork loin turducken dolore doner ribeye dolor ipsum. Frankfurter meatball brisket pig lorem eiusmod deserunt tri-tip rump voluptate fatback jowl chicken corned beef. Fugiat capicola dolore pastrami meatloaf laborum ipsum, velit deserunt elit dolore meatball. Shank ullamco ex meatball ball tip turducken culpa reprehenderit. Ad brisket sirloin hamburger, in meatball porchetta cillum filet mignon ribeye meatloaf sunt reprehenderit prosciutto. Veniam t-bone brisket, do frankfurter bacon strip steak.";
	ExternalResource = "Particles/bacon_ipsum.txt";
}
CNEdEditorLightFactory	$LOCAL$/_Backdrop_Light_Factory
{
	NearClipPlane = 1.0000000e+002;
	SpotFalloff = 8.8541701e-002;
	Magnitude = 1.0000000e+005;
}
CParticleAttributeList	$LOCAL$/_GlobalAttributes
{
	EditorInfosPosition = int2(-599, -20);
	SamplerList = 
	{
		"$LOCAL$/CParticleSamplerText_D7C694F3",
	};
}
CNEdEditorBackdrop_List	$LOCAL$/_BackdropList
{
	EditorInfosPosition = int2(125, -433);
	BackgroundLayers2D = 
	{
		"$LOCAL$/CNEdEditorBackdrop_Brush_9A913525",
	};
	SceneLayers3D = 
	{
		"$LOCAL$/CNEdEditorBackdrop_Model3D_578F322E",
		"$LOCAL$/_Backdrop_Light",
	};
}
CNEdEditorBackdrop_Brush	$LOCAL$/CNEdEditorBackdrop_Brush_9A913525
{
	EditorInfosPosition = int2(-27, -485);
	LayerName = "Layer_Brush";
}
CNEdEditorBackdrop_Model3D	$LOCAL$/CNEdEditorBackdrop_Model3D_578F322E
{
	EditorInfosPosition = int2(-17, -380);
	LayerName = "Model";
	Position = float3(0.0000000e+000, -2.0000000e+001, 0.0000000e+000);
	ResourceModel = "Meshes/CubeRoom_Default.fbx";
	IsActive = false;
}
CNEdEditorBackdrop_Light	$LOCAL$/_Backdrop_Light
{
	LayerName = "GlobalLight";
	Position = float3(1.1233553e+002, 2.8270447e+002, 2.2297581e+002);
	EulerOrientation = float3(-4.8550171e+001, 2.6739031e+001, -9.5600376e-007);
	LightDistance = 3.7717276e+002;
	LightFactory = "$LOCAL$/_Backdrop_Light_Factory";
}
CParticleRenderer_Billboard	$LOCAL$/CParticleRenderer_Billboard_E997D199
{
	Diffuse = "Textures/FX/TextAtlas.dds";
	AtlasDefinition = "Textures/FX/TextAtlas.pkat";
	AspectRatio = 5.0000000e-001;
}
CCompilerSyntaxNodeExpression	$LOCAL$/CCompilerSyntaxNodeExpression_ED5189FE
{
	Expression = "function void	Eval()
{
	Size = parent.Size;
	
	int	lineId = parent.LineID;
	int	particleId = int(spawner.LifeRatio / (parent.InvLife * 0.001));
	int charCode = Text.charCode(int2(lineId, particleId));
	TextureID = max(0, min(charCode - 32, 126 - 32));;
	Life = select(4.5, 0.0, charCode <= 32);	// kill space particles
	
	Position = float3(particleId * Size, 0, 0);
}
";
}
CParticleFieldDeclaration	$LOCAL$/CParticleFieldDeclaration_ADEBF635
{
	FieldName = "Size";
}
CParticleEvolver_Spawner	$LOCAL$/CharLineTrail
{
	SpawnMetric = Time;
	SpawnInterval = 1.0000000e-003;
	FirstSpawnDelay = 5.0000000e-001;
	Descriptor = "$LOCAL$/CParticleDescriptor_6BB09B8F";
}
CParticleState	$LOCAL$/CParticleState_8E9B069C
{
	StateName = "State_0";
}
CParticleDescriptor	$LOCAL$/CParticleDescriptor_6BB09B8F
{
	Renderer = "$LOCAL$/CParticleRenderer_Billboard_E997D199";
	SpawnEvaluator = "$LOCAL$/CCompilerSyntaxNodeExpression_ED5189FE";
	States = 
	{
		"$LOCAL$/CParticleState_8E9B069C",
	};
}
