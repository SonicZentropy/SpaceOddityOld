Version = 1.9.0.27524;
CParticleEffect	$LOCAL$/Resource
{
	EditorInfosPosition = int2(73, 52);
	OnSpawn = "$LOCAL$/Spawner";
	CustomAttributes = "$LOCAL$/_GlobalAttributes";
	Autostart = true;
}
CNEdEditorParticle_Data	$LOCAL$/EDITOR
{
	EditorInfosPosition = int2(413, -144);
	Position = float3(1.6114064e+000, 8.1171751e-001, -1.7285095e+000);
	EulerOrientation = float3(-2.0096954e+001, -2.2361192e+002, 0.0000000e+000);
	Backdrops = "$LOCAL$/_BackdropList";
	BackdropToShapeSamplerMapping = 
	{
		"$LOCAL$/CNEdEditorParticle_BackdropToSamplerShape_B64F0F03",
	};
}
CActionFactoryParticleSpawnerBase	$LOCAL$/MainLandRoot
{
	EditorInfosPosition = int2(-288, -61);
	EditorInfosIsBlockMinimized = 0;
	Descriptor = "$LOCAL$/CParticleDescriptor_AE135B2A";
	FluxFactorExpression = "Subdivisions.y";
}
CParticleDescriptor	$LOCAL$/CParticleDescriptor_AE135B2A
{
	EditorInfosPosition = int2(-392, -44);
	CustomFields = 
	{
		"$LOCAL$/CParticleFieldDeclaration_0EA03826",
		"$LOCAL$/CParticleFieldDeclaration_A7A9835F",
	};
	SpawnEvaluator = "$LOCAL$/CCompilerSyntaxNodeExpression_5566F5E7";
	States = 
	{
		"$LOCAL$/CParticleState_3AF8190E",
	};
}
CActionFactoryWithChilds	$LOCAL$/Spawner
{
	EditorInfosPosition = int2(-162, -81);
	ChildList = 
	{
		"$LOCAL$/Land",
		"$LOCAL$/Detail",
		"$LOCAL$/RingsRoot",
		"$LOCAL$/Transient",
	};
}
CParticleFieldDeclaration	$LOCAL$/CParticleFieldDeclaration_A7A9835F
{
	FieldName = "ChildSpawnIntervalScale";
}
CCompilerSyntaxNodeExpression	$LOCAL$/CCompilerSyntaxNodeExpression_5566F5E7
{
	EditorInfosPosition = int2(-508, 22);
	Expression = "function void	Eval()
{
	Life = 2.0;
	Phi = spawner.LifeRatio;
	int3	pCoords = Sphere.buildParametricCoordsSphere(float2(0, Phi), 0);
	Position = Sphere.samplePosition(pCoords);
//	float2	ar = float2(0*2, Phi-0.5) * pi;
//	Position = float3(cos(ar.x) * cos(ar.y), sin(ar.y), sin(ar.x) * cos(ar.y));

	float	realRadius = cos((Phi - 0.5) * pi);
	float	nSpawned = floor(realRadius * Subdivisions.x);
	ChildSpawnIntervalScale = realRadius * 2*pi / nSpawned;
}
";
}
CParticleState	$LOCAL$/CParticleState_3AF8190E
{
	EditorInfosPosition = int2(-508, 65);
	StateName = "State_0";
	Evolvers = 
	{
		"$LOCAL$/Script_1",
		"$LOCAL$/MainLand",
	};
}
CNEdEditorBackdrop_Light	$LOCAL$/_Backdrop_Light
{
	LayerName = "GlobalLight";
	Position = float3(1.1233553e+002, 2.8270447e+002, 2.2297581e+002);
	EulerOrientation = float3(-4.8550171e+001, 2.6739031e+001, -9.5600376e-007);
	LightDistance = 3.7717276e+002;
	LightFactory = "$LOCAL$/_Backdrop_Light_Factory";
}
CNEdEditorLightFactory	$LOCAL$/_Backdrop_Light_Factory
{
	NearClipPlane = 1.0000000e+002;
	SpotFalloff = 8.8541701e-002;
	Magnitude = 1.0000000e+005;
}
CParticleAttributeList	$LOCAL$/_GlobalAttributes
{
	EditorInfosPosition = int2(-599, -20);
	AttributeList = 
	{
		"$LOCAL$/CParticleAttributeDeclaration_FC00091B",
		"$LOCAL$/CParticleAttributeDeclaration_2964AB41",
		"$LOCAL$/CParticleAttributeDeclaration_B0141A98",
		"$LOCAL$/CParticleAttributeDeclaration_0321013B",
		"$LOCAL$/CParticleAttributeDeclaration_C09F86E1",
		"$LOCAL$/CParticleAttributeDeclaration_D16DCB1A",
		"$LOCAL$/CParticleAttributeDeclaration_A4465AE5",
	};
	SamplerList = 
	{
		"$LOCAL$/CParticleSamplerShape_F45C69FD",
		"$LOCAL$/CParticleSamplerTexture_1A55881B",
		"$LOCAL$/CParticleSamplerCurve_E34AAD34",
		"$LOCAL$/CParticleSamplerCurve_BCF9D0E2",
	};
}
CNEdEditorBackdrop_List	$LOCAL$/_BackdropList
{
	EditorInfosPosition = int2(125, -433);
	EditorInfosIsBlockMinimized = 0;
	BackgroundLayers2D = 
	{
		"$LOCAL$/CNEdEditorBackdrop_Brush_9A913525",
	};
	SceneLayers3D = 
	{
		"$LOCAL$/_Backdrop_Light",
	};
}
CNEdEditorBackdrop_Brush	$LOCAL$/CNEdEditorBackdrop_Brush_9A913525
{
	EditorInfosPosition = int2(-27, -485);
	LayerName = "Layer_Brush";
	BackgroundColorTop = float4(2.6717556e-001, 8.1796430e-002, 2.5047708e-002, 1.0000000e+000);
	BackgroundColorBottom = float4(3.3369016e-002, 2.3258615e-002, 1.5267175e-001, 1.0000000e+000);
}
CNEdEditorParticle_BackdropToSamplerShape	$LOCAL$/CNEdEditorParticle_BackdropToSamplerShape_B64F0F03
{
	SourceSamplerShape = "$LOCAL$/CParticleSamplerShape_F45C69FD";
}
CParticleSamplerShape	$LOCAL$/CParticleSamplerShape_F45C69FD
{
	EditorInfosIsBlockMinimized = 0;
	SamplerName = "Sphere";
	Shape = "$LOCAL$/CShapeDescriptor_05FF2204";
}
CShapeDescriptor	$LOCAL$/CShapeDescriptor_05FF2204
{
	ShapeType = SPHERE;
}
CParticleEvolver_Script	$LOCAL$/Script_1
{
	Expression = "$LOCAL$/CCompilerSyntaxNodeExpression_2AD7A717";
}
CCompilerSyntaxNodeExpression	$LOCAL$/CCompilerSyntaxNodeExpression_2AD7A717
{
	Expression = "function void	Eval()
{
	int3	pCoords = Sphere.buildParametricCoordsSphere(float2(LifeRatio, Phi), 0);
	Position = Sphere.samplePosition(pCoords);
//	float2	ar = float2(LifeRatio*2, Phi-0.5) * pi;
//	Position = float3(cos(ar.x) * cos(ar.y), sin(ar.y), sin(ar.x) * cos(ar.y));
}
";
}
CParticleFieldDeclaration	$LOCAL$/CParticleFieldDeclaration_0EA03826
{
	FieldName = "Phi";
}
CParticleAttributeDeclaration	$LOCAL$/CParticleAttributeDeclaration_C09F86E1
{
	AttributeName = "Subdivisions";
	AttributeType = int2;
	DefaultValueF4 = float4(8.0000000e+001, 1.6000000e+002, 0.0000000e+000, 0.0000000e+000);
	DefaultValueI4 = int4(500, 250, 0, 0);
	HasMin = true;
	HasMax = true;
	MaxValueF4 = float4(2.0000000e+002, 2.0000000e+002, 1.0000000e+000, 1.0000000e+000);
	MaxValueI4 = int4(1000, 1000, 10, 10);
}
CParticleEvolver_Spawner	$LOCAL$/MainLand
{
	SpawnInterval = 1.0000000e+000;
	CustomSpawnIntervalScaleField = "ChildSpawnIntervalScale";
	FirstSpawnDelay = 5.0000001e-002;
	Descriptor = "$LOCAL$/CParticleDescriptor_1C2D37DB";
}
CParticleState	$LOCAL$/CParticleState_4F544EB8
{
	StateName = "State_0";
	Evolvers = 
	{
		"$LOCAL$/Script_2",
	};
}
CParticleDescriptor	$LOCAL$/CParticleDescriptor_1C2D37DB
{
	Renderer = "$LOCAL$/CParticleRenderer_Billboard_7E215485";
	CustomFields = 
	{
		"$LOCAL$/CParticleFieldDeclaration_78FF9EBF",
		"$LOCAL$/CParticleFieldDeclaration_76EE34EE",
		"$LOCAL$/CParticleFieldDeclaration_5C1F7B03",
	};
	SpawnEvaluator = "$LOCAL$/CCompilerSyntaxNodeExpression_E2DCF63A";
	States = 
	{
		"$LOCAL$/CParticleState_4F544EB8",
	};
}
CCompilerSyntaxNodeExpression	$LOCAL$/CCompilerSyntaxNodeExpression_E2DCF63A
{
	Expression = "// since 1.7.0 we can have \'PostEval\' without \'Eval\'
function void	PostEval()
{
	float2	angles = float2(spawner.LifeRatio, parent.Phi);
	float2	imgLookup = GlobeLookup.sample(-angles).gb;	// Blue channel : main land
	int3	pCoords = Sphere.buildParametricCoordsSphere(angles, 0);
	Position = Sphere.samplePosition(pCoords);
//	float2	ar = float2(spawner.LifeRatio*2, parent.Phi-0.5) * pi;
//	Position = float3(cos(ar.x) * cos(ar.y), sin(ar.y), sin(ar.x) * cos(ar.y));

	Brightness = imgLookup.x;
	Life = select(0, infinity, imgLookup.y > 0.5);
	Normal = normalize(Position);
}
";
}
CParticleRenderer_Billboard	$LOCAL$/CParticleRenderer_Billboard_7E215485
{
	Diffuse = "Textures/FX/bokeh_x3.dds";
	AtlasDefinition = "Textures/FX/bokeh_x3.pkat";
	SoftAnimationBlending = true;
}
CParticleSamplerTexture	$LOCAL$/CParticleSamplerTexture_1A55881B
{
	SamplerName = "GlobeLookup";
	TextureResource = "Textures/EarthLookup.png";
	SampleRawValues = false;
}
CParticleDescriptor	$LOCAL$/CParticleDescriptor_8D2B2C31
{
	EditorInfosPosition = int2(-392, -44);
	CustomFields = 
	{
		"$LOCAL$/CParticleFieldDeclaration_F05B3648",
		"$LOCAL$/CParticleFieldDeclaration_FF136EAB",
	};
	SpawnEvaluator = "$LOCAL$/CCompilerSyntaxNodeExpression_38A10D4A";
	States = 
	{
		"$LOCAL$/CParticleState_126CB0D5",
	};
}
CParticleFieldDeclaration	$LOCAL$/CParticleFieldDeclaration_F05B3648
{
	FieldName = "Phi";
}
CParticleFieldDeclaration	$LOCAL$/CParticleFieldDeclaration_FF136EAB
{
	FieldName = "ChildSpawnIntervalScale";
}
CCompilerSyntaxNodeExpression	$LOCAL$/CCompilerSyntaxNodeExpression_38A10D4A
{
	EditorInfosPosition = int2(-508, 22);
	Expression = "function void	Eval()
{
	Life = 2.0;
	Phi = spawner.LifeRatio;
	int3	pCoords = Sphere.buildParametricCoordsSphere(float2(0, Phi), 0);
	Position = Sphere.samplePosition(pCoords);

	float	realRadius = cos((Phi - 0.5) * pi);
	float	nSpawned = floor(realRadius * Subdivisions.x*2);
	ChildSpawnIntervalScale = realRadius * 2*pi / nSpawned;
}
";
}
CParticleState	$LOCAL$/CParticleState_126CB0D5
{
	EditorInfosPosition = int2(-508, 65);
	StateName = "State_0";
	Evolvers = 
	{
		"$LOCAL$/CParticleEvolver_Script_129705BC",
		"$LOCAL$/Outlines",
	};
}
CParticleEvolver_Script	$LOCAL$/CParticleEvolver_Script_129705BC
{
	Expression = "$LOCAL$/CCompilerSyntaxNodeExpression_F5EEF92F";
}
CCompilerSyntaxNodeExpression	$LOCAL$/CCompilerSyntaxNodeExpression_F5EEF92F
{
	Expression = "function void	Eval()
{
	int3	pCoords = Sphere.buildParametricCoordsSphere(float2(LifeRatio, Phi), 0);
	Position = Sphere.samplePosition(pCoords);
}
";
}
CParticleEvolver_Spawner	$LOCAL$/Outlines
{
	SpawnInterval = 1.0000000e+000;
	CustomSpawnIntervalScaleField = "ChildSpawnIntervalScale";
	FirstSpawnDelay = 0.0000000e+000;
	Descriptor = "$LOCAL$/CParticleDescriptor_93C4FA39";
}
CParticleDescriptor	$LOCAL$/CParticleDescriptor_93C4FA39
{
	Renderer = "$LOCAL$/CParticleRenderer_Billboard_415A98F0";
	CustomFields = 
	{
		"$LOCAL$/CParticleFieldDeclaration_005943E4",
		"$LOCAL$/CParticleFieldDeclaration_B5D56482",
		"$LOCAL$/CParticleFieldDeclaration_E6E72A7F",
	};
	SpawnEvaluator = "$LOCAL$/CCompilerSyntaxNodeExpression_1D07B273";
	States = 
	{
		"$LOCAL$/CParticleState_68ED38B2",
	};
}
CParticleRenderer_Billboard	$LOCAL$/CParticleRenderer_Billboard_415A98F0
{
	Diffuse = "Textures/FX/bokeh_x3.dds";
	AtlasDefinition = "Textures/FX/bokeh_x3.pkat";
	SoftAnimationBlending = true;
}
CCompilerSyntaxNodeExpression	$LOCAL$/CCompilerSyntaxNodeExpression_1D07B273
{
	Expression = "// since 1.7.0 we can have \'PostEval\' without \'Eval\'
function void	PostEval()
{
	float2	angles = float2(spawner.LifeRatio, parent.Phi);
	float	imgLookup = GlobeLookup.sample(-angles).r;	// Red channel : outlines
	int3	pCoords = Sphere.buildParametricCoordsSphere(angles, 0);
	Position = Sphere.samplePosition(pCoords);
	BaseSize = imgLookup * 0.0020 + 0.0005;
	Life = select(0, infinity, imgLookup > 0.5);
	Normal = normalize(Position);
}
";
}
CParticleState	$LOCAL$/CParticleState_68ED38B2
{
	StateName = "State_0";
	Evolvers = 
	{
		"$LOCAL$/Script_3",
	};
}
CActionFactoryParticleSpawnerBase	$LOCAL$/OutlinesRoot
{
	EditorInfosPosition = int2(-288, -61);
	EditorInfosIsBlockMinimized = 0;
	Descriptor = "$LOCAL$/CParticleDescriptor_8D2B2C31";
	SpawnCount = 2.0000000e+000;
	FluxFactorExpression = "Subdivisions.y";
}
CParticleFieldDeclaration	$LOCAL$/CParticleFieldDeclaration_005943E4
{
	FieldName = "Color";
	FieldType = float4;
}
CParticleAttributeDeclaration	$LOCAL$/CParticleAttributeDeclaration_2964AB41
{
	AttributeName = "FocusDistance";
	AttributeDescription = "Distance from the focus plane to the camera";
	DefaultValueF4 = float4(1.5058824e+000, 0.0000000e+000, 0.0000000e+000, 0.0000000e+000);
	HasMin = true;
	HasMax = true;
	MaxValueF4 = float4(8.0000000e+000, 1.0000000e+000, 1.0000000e+000, 1.0000000e+000);
	MaxValueI4 = int4(10, 10, 10, 10);
}
CParticleAttributeDeclaration	$LOCAL$/CParticleAttributeDeclaration_B0141A98
{
	AttributeName = "FocusRange";
	AttributeType = float2;
	AttributeDescription = "Distance from the in-focus to the out-of-focus plane in \'x\'\\nSize of the fully-focused zone in \'y\'";
	DefaultValueF4 = float4(6.1764699e-001, 0.0000000e+000, 0.0000000e+000, 0.0000000e+000);
	HasMin = true;
	HasMax = true;
	MaxValueF4 = float4(1.0000000e+001, 1.0000000e+001, 1.0000000e+000, 1.0000000e+000);
	MaxValueI4 = int4(10, 10, 10, 10);
}
CParticleAttributeDeclaration	$LOCAL$/CParticleAttributeDeclaration_0321013B
{
	AttributeName = "MaxCocRadius";
	AttributeDescription = "Radius of the Bokeh when fully out of focus.\\n(Warning: larger values can quickly become EXTREMELTY HEAVY on overdraw\\nand can bring your GPU to its knees...)";
	DefaultValueF4 = float4(1.7000001e-002, 0.0000000e+000, 0.0000000e+000, 0.0000000e+000);
	HasMin = true;
	HasMax = true;
	MaxValueF4 = float4(1.0000000e-001, 1.0000000e+000, 1.0000000e+000, 1.0000000e+000);
	MaxValueI4 = int4(10, 10, 10, 10);
}
CParticleAttributeDeclaration	$LOCAL$/CParticleAttributeDeclaration_D16DCB1A
{
	AttributeName = "ViewPosition";
	AttributeType = float3;
	MinValueF4 = float4(-1.0000000e+002, -1.0000000e+002, -1.0000000e+002, 0.0000000e+000);
	MaxValueF4 = float4(1.0000000e+002, 1.0000000e+002, 1.0000000e+002, 1.0000000e+000);
	MaxValueI4 = int4(10, 10, 10, 10);
}
CParticleAttributeDeclaration	$LOCAL$/CParticleAttributeDeclaration_A4465AE5
{
	AttributeName = "ViewDirection";
	AttributeType = float3;
	HasMin = true;
	HasMax = true;
	MinValueF4 = float4(-1.0000000e+000, -1.0000000e+000, -1.0000000e+000, 0.0000000e+000);
	MaxValueF4 = float4(1.0000000e+000, 1.0000000e+000, 1.0000000e+000, 1.0000000e+000);
	MaxValueI4 = int4(10, 10, 10, 10);
}
CParticleEvolver_Script	$LOCAL$/Script_2
{
	Expression = "$LOCAL$/CCompilerSyntaxNodeExpression_5A0DF10C";
}
CCompilerSyntaxNodeExpression	$LOCAL$/CCompilerSyntaxNodeExpression_5A0DF10C
{
	Expression = "function void	Eval()
{
	float3	rot_normal = rotate(Normal, float3(0,1,0), scene.Time*RotationSpeed*0.3);

	float	noiseTerm = pow(fast_noise(scene.Time*1 + rot_normal*40) * 0.5 + 0.5, 2);
	float	pOffset = 1 + 0.05 * (noiseTerm * pow(cos(saturate(wavesaw((-rot_normal.y*2)*0.2 + scene.Time*0.5)*8-1)*2*pi)*-0.5+0.5,2));
	Position = rot_normal * pOffset;
	float	globeSide = dot(rot_normal, normalize(Position - ViewPosition));

	float	realSize = 0.0025;

	float	distToView = dot(Position - ViewPosition, ViewDirection);
	float	dofSignedDist = distToView - FocusDistance;
	float	dofDist = abs(dofSignedDist);
	
	float	dofFactor = min(1, max(0, dofDist - FocusRange.y) / FocusRange.x);
	float	dofFactorNonLin = pow(dofFactor,2);

	float	cocFactor = dofFactorNonLin;
	float	cocScale = distToView * cocFactor;
	
	float	newSize = realSize + cocScale * MaxCocRadius;
	float	areaDiffusion = pow(realSize / newSize, 2);
	
//	float	cocBias = sqrt(min(realSize / (newSize - realSize), 100));	// hack
	TextureID = 3*cocFactor;// + 2*cocBias;
	
	Size = newSize;
	
	float	n = fast_noise(float3(Position*12*(sin(scene.Time*0.2)*0.5 + 1)));
	float	n3 = pow(n*0.5+0.5, 0.25);
	float	t = n3 * (1 - Brightness);
	float4	cScale = lerp(float4(0.2, 0.6, 1.5, 1), float4(1.5, 0.4, 0.1, 1), t);
	
	Color = LandColor.sample(globeSide*0.5+0.5) * cScale;
	Color *= (areaDiffusion).111x;
}
";
}
CParticleFieldDeclaration	$LOCAL$/CParticleFieldDeclaration_78FF9EBF
{
	FieldName = "Color";
	FieldType = float4;
}
CParticleFieldDeclaration	$LOCAL$/CParticleFieldDeclaration_76EE34EE
{
	FieldName = "Brightness";
}
CParticleEvolver_Script	$LOCAL$/CParticleEvolver_Script_FE8A660E
{
	Expression = "$LOCAL$/CCompilerSyntaxNodeExpression_7164D6E9";
}
CParticleEvolver_Script	$LOCAL$/Script_3
{
	Expression = "$LOCAL$/CCompilerSyntaxNodeExpression_C4BF5B40";
}
CCompilerSyntaxNodeExpression	$LOCAL$/CCompilerSyntaxNodeExpression_C4BF5B40
{
	Expression = "function void	Eval()
{
	float3	rot_normal = rotate(Normal, float3(0,1,0), scene.Time*RotationSpeed*0.3);
	
	float	noiseTerm = pow(fast_noise(scene.Time*1 + rot_normal*40) * 0.5 + 0.5, 2);
	float	pOffset = 1 + 0.05 * (noiseTerm * pow(cos(saturate(wavesaw((-rot_normal.y*2)*0.2 + scene.Time*0.5)*8-1)*2*pi)*-0.5+0.5,2));
	Position = rot_normal * pOffset;
	
	float	globeSide = dot(rot_normal, normalize(Position - ViewPosition));

	float	realSize = BaseSize;

	float	distToView = dot(Position - ViewPosition, ViewDirection);
	float	dofSignedDist = distToView - FocusDistance;
	float	dofDist = abs(dofSignedDist);
	
	float	dofFactor = min(1, max(0, dofDist - FocusRange.y) / FocusRange.x);
	float	dofFactorNonLin = pow(dofFactor,2);

	float	cocFactor = dofFactorNonLin;
	float	cocScale = distToView * cocFactor;
	
	float	newSize = realSize + cocScale * MaxCocRadius;
	float	areaDiffusion = pow(realSize / newSize, 2);
	
//	float	cocBias = sqrt(min(realSize / (newSize - realSize), 100));	// hack
	TextureID = 3*cocFactor;// + 2*cocBias;
	
	Size = newSize;
	
	float	n = fast_noise(float3(Position*12*(sin(scene.Time*0.2)*0.5 + 1)));
	float	n2 = sqrt(abs(n)) * sign(n);
	float4	cScale = 1.5*lerp(float4(1, 0.5, 0.4, 1), float4(0.5, 0.5, 1, 1), n2 * 0.5 + 0.5);
//	float4	cScale = select(float4(1, 0.5, 0.4, 1), float4(0.2, 0.5, 1, 1), n < 0);
	
	Color = LandColor.sample(globeSide*0.5+0.5) * cScale;
	
	float	brightness = 2.0;
	Color *= (areaDiffusion * brightness).111x;
}
";
}
CParticleFieldDeclaration	$LOCAL$/CParticleFieldDeclaration_5C1F7B03
{
	FieldName = "Normal";
	FieldType = float3;
}
CParticleFieldDeclaration	$LOCAL$/CParticleFieldDeclaration_B5D56482
{
	FieldName = "Normal";
	FieldType = float3;
}
CParticleSamplerCurve	$LOCAL$/CParticleSamplerCurve_E34AAD34
{
	SamplerName = "LandColor";
	ValueType = Float4;
	Times = 
	{
		0.0000000e+000,
		9.6286766e-002,
		1.6603526e-001,
		3.2629585e-001,
		5.0000000e-001,
		5.9999996e-001,
		1.0000000e+000,
	};
	FloatValues = 
	{
		1.9169559e+000,
		1.5629582e+000,
		1.2339971e+000,
		7.8359103e-001,
		2.1478662e+000,
		1.6891940e+000,
		1.1678700e+000,
		2.5262469e-001,
		2.5753939e+000,
		1.8383374e+000,
		7.7915370e-001,
		6.5743148e-001,
		2.2708325e+000,
		3.8836032e-001,
		1.4491391e-001,
		3.1126153e-001,
		1.0670435e+000,
		1.8540007e-001,
		7.8138471e-002,
		1.3823193e-001,
		8.5667878e-002,
		2.4951774e-001,
		1.7936707e-001,
		4.9721062e-001,
		2.3396119e-002,
		5.5394351e-002,
		2.2126061e-001,
		7.1738136e-001,
	};
	FloatTangents = 
	{
		0.0000000e+000,
		0.0000000e+000,
		0.0000000e+000,
		0.0000000e+000,
		5.8719767e-003,
		-2.3034019e-002,
		2.3625940e-001,
		-2.9132941e-003,
		5.2890122e-001,
		4.0830669e-001,
		-1.4915094e-001,
		6.0126301e-002,
		3.8312703e-001,
		2.9577044e-001,
		-1.0804240e-001,
		4.3554474e-002,
		7.0482157e-002,
		-7.2147226e-001,
		-6.8096483e-001,
		-4.4200367e-001,
		1.6194634e-001,
		-1.6577213e+000,
		-1.5646476e+000,
		-1.0155885e+000,
		-6.4831811e-001,
		-2.5923705e-001,
		-9.1137066e-002,
		4.6580359e-001,
		-7.0270270e-001,
		-2.8098336e-001,
		-9.8782167e-002,
		5.0487781e-001,
		-1.7262028e+000,
		-2.2269589e-001,
		0.0000000e+000,
		7.1324050e-002,
		-9.9375987e-001,
		-1.2820409e-001,
		0.0000000e+000,
		4.1060634e-002,
		-3.7442003e-003,
		4.9423152e-003,
		4.9366646e-002,
		1.9680390e-001,
		-1.4976808e-002,
		1.9769270e-002,
		1.9746666e-001,
		7.8721595e-001,
		0.0000000e+000,
		0.0000000e+000,
		0.0000000e+000,
		0.0000000e+000,
		0.0000000e+000,
		0.0000000e+000,
		0.0000000e+000,
		0.0000000e+000,
	};
	MinLimits = float4(0.0000000e+000, 0.0000000e+000, 0.0000000e+000, 0.0000000e+000);
}
CParticleSamplerCurve	$LOCAL$/CParticleSamplerCurve_63ADD679
{
	SamplerName = "SizeFactor";
	Times = 
	{
		0.0000000e+000,
		1.7500000e-001,
		1.7999999e-001,
		7.5000000e-001,
		7.5500000e-001,
		1.0000000e+000,
	};
	FloatValues = 
	{
		0.0000000e+000,
		0.0000000e+000,
		1.0000000e+000,
		1.0000000e+000,
		0.0000000e+000,
		0.0000000e+000,
	};
	FloatTangents = 
	{
		0.0000000e+000,
		0.0000000e+000,
		0.0000000e+000,
		0.0000000e+000,
		0.0000000e+000,
		0.0000000e+000,
		0.0000000e+000,
		0.0000000e+000,
		0.0000000e+000,
		0.0000000e+000,
		0.0000000e+000,
		0.0000000e+000,
	};
	MinLimits = float4(0.0000000e+000, 0.0000000e+000, 0.0000000e+000, 0.0000000e+000);
}
CParticleDescriptor	$LOCAL$/CParticleDescriptor_302D7BAC
{
	EditorInfosPosition = int2(-392, -44);
	CustomFields = 
	{
		"$LOCAL$/CParticleFieldDeclaration_FC9AADDF",
		"$LOCAL$/CParticleFieldDeclaration_EAB0E28E",
	};
	SpawnEvaluator = "$LOCAL$/CCompilerSyntaxNodeExpression_7796CD69";
	States = 
	{
		"$LOCAL$/CParticleState_DF4A53E0",
	};
}
CParticleFieldDeclaration	$LOCAL$/CParticleFieldDeclaration_FC9AADDF
{
	FieldName = "Phi";
}
CParticleFieldDeclaration	$LOCAL$/CParticleFieldDeclaration_EAB0E28E
{
	FieldName = "ChildSpawnIntervalScale";
}
CCompilerSyntaxNodeExpression	$LOCAL$/CCompilerSyntaxNodeExpression_7796CD69
{
	EditorInfosPosition = int2(-508, 22);
	Expression = "function void	Eval()
{
	Life = 2.0;
	Phi = spawner.LifeRatio;
	int3	pCoords = Sphere.buildParametricCoordsSphere(Phi.0x, 0);
	Position = Sphere.samplePosition(pCoords);
//	float2	ar = float2(0*2, Phi-0.5) * pi;
//	Position = float3(cos(ar.x) * cos(ar.y), sin(ar.y), sin(ar.x) * cos(ar.y));
	
	float	realRadius = cos((Phi - 0.5) * pi);
	float	nSpawned = floor(realRadius * Subdivisions.x*2.5);
	ChildSpawnIntervalScale = realRadius * 2*pi / nSpawned;
}
";
}
CParticleState	$LOCAL$/CParticleState_DF4A53E0
{
	EditorInfosPosition = int2(-508, 65);
	StateName = "State_0";
	Evolvers = 
	{
		"$LOCAL$/CParticleEvolver_Script_93B39023",
		"$LOCAL$/OuterShell",
	};
}
CParticleEvolver_Script	$LOCAL$/CParticleEvolver_Script_93B39023
{
	Expression = "$LOCAL$/CCompilerSyntaxNodeExpression_CEE29022";
}
CCompilerSyntaxNodeExpression	$LOCAL$/CCompilerSyntaxNodeExpression_CEE29022
{
	Expression = "function void	Eval()
{
	int3	pCoords = Sphere.buildParametricCoordsSphere(float2(LifeRatio, Phi), 0);
	Position = Sphere.samplePosition(pCoords);
//	float2	ar = float2(LifeRatio*2, Phi-0.5) * pi;
//	Position = float3(cos(ar.x) * cos(ar.y), sin(ar.y), sin(ar.x) * cos(ar.y));
}
";
}
CParticleEvolver_Spawner	$LOCAL$/OuterShell
{
	SpawnInterval = 1.0000000e+000;
	CustomSpawnIntervalScaleField = "ChildSpawnIntervalScale";
	FirstSpawnDelay = 5.0000001e-002;
	Descriptor = "$LOCAL$/CParticleDescriptor_A512B3D4";
}
CParticleDescriptor	$LOCAL$/CParticleDescriptor_A512B3D4
{
	Renderer = "$LOCAL$/CParticleRenderer_Billboard_4E56B527";
	CustomFields = 
	{
		"$LOCAL$/CParticleFieldDeclaration_E0365776",
	};
	Samplers = 
	{
		"$LOCAL$/CParticleSamplerCurve_63ADD679",
		"$LOCAL$/CParticleSamplerCurve_A0D1DCB3",
	};
	SpawnEvaluator = "$LOCAL$/CCompilerSyntaxNodeExpression_4B11C0EB";
	States = 
	{
		"$LOCAL$/CParticleState_87B8AC8A",
	};
}
CParticleRenderer_Billboard	$LOCAL$/CParticleRenderer_Billboard_4E56B527
{
	Diffuse = "Textures/FX/bokeh_x3.dds";
	AtlasDefinition = "Textures/FX/bokeh_x3.pkat";
	SoftAnimationBlending = true;
}
CParticleFieldDeclaration	$LOCAL$/CParticleFieldDeclaration_E0365776
{
	FieldName = "Color";
	FieldType = float4;
}
CCompilerSyntaxNodeExpression	$LOCAL$/CCompilerSyntaxNodeExpression_7164D6E9
{
	Expression = "function void	Eval()
{
	float3	rot_normal = rotate(Normal, float3(0,1,0), scene.Time*RotationSpeed*0.3);
	Position = rot_normal;
	
	float	globeSide = dot(rot_normal, normalize(Position - ViewPosition));
	
	float	distToView = dot(Position - ViewPosition, ViewDirection);
	float	dofSignedDist = distToView - FocusDistance;
	float	dofDist = abs(dofSignedDist);
	
	float	dofFactor = min(1, max(0, dofDist - FocusRange.y) / FocusRange.x);
	float	dofFactorNonLin = pow(dofFactor,2);

	float	cocFactor = dofFactorNonLin;
	float	cocScale = distToView * cocFactor;
	
	float	realSize = 0.02 + 0.06 * LifeRatio;
	float	newSize = realSize + cocScale * MaxCocRadius;
	float	areaDiffusion = pow(realSize / newSize, 2);
	
//	float	cocBias = sqrt(min(realSize / (newSize - realSize), 100));	// hack
	TextureID = 6*cocFactor;// + 2*cocBias;
	
	NormalForAlignment = safe_normalize(lerp(rot_normal, -ViewDirection, cocFactor), rot_normal);
	
	Size = newSize;
	
	float	brightnessVar = 1 - pow(LifeRatio,6);
	Color = (1*float3(0.1,0.5,1)).xyz1;
	Color *= float4((Brightness * brightnessVar).xxx, areaDiffusion);
}
";
}
CParticleRenderer_Billboard	$LOCAL$/CParticleRenderer_Billboard_398BFBA2
{
	Diffuse = "Textures/FX/hexagon_bokeh.dds";
	AtlasDefinition = "Textures/FX/hexagon_bokeh.pkat";
	SoftAnimationBlending = true;
	BillboardMode = PlanarAlignedQuad;
	AxisField = "Tangent";
	Axis2Field = "NormalForAlignment";
	AxisScale = 1.0000000e+000;
}
CCompilerSyntaxNodeExpression	$LOCAL$/CCompilerSyntaxNodeExpression_4B11C0EB
{
	Expression = "// since 1.7.0 we can have \'PostEval\' without \'Eval\'
function void	PostEval()
{
	float2	angles = float2(spawner.LifeRatio, parent.Phi);
	float	imgLookup = GlobeLookup.sample(-angles).b;	// Blue channel : main land
	int3	pCoords = Sphere.buildParametricCoordsSphere(angles, 0);
	Position = Sphere.samplePosition(pCoords)*1.5;
//	float2	ar = float2(spawner.LifeRatio*2, parent.Phi-0.5) * pi;
//	Position = float3(cos(ar.x) * cos(ar.y), sin(ar.y), sin(ar.x) * cos(ar.y))*1.5;

	Life = select(0, infinity, imgLookup > 0.5);
//	Normal = normalize(Position);	// cheap extraction of the normal: it\'s a sphere anyway.
}
";
}
CParticleState	$LOCAL$/CParticleState_87B8AC8A
{
	StateName = "State_0";
	Evolvers = 
	{
		"$LOCAL$/CParticleEvolver_Script_93C12115",
	};
}
CParticleEvolver_Script	$LOCAL$/CParticleEvolver_Script_93C12115
{
	Expression = "$LOCAL$/CCompilerSyntaxNodeExpression_FE901AFC";
}
CCompilerSyntaxNodeExpression	$LOCAL$/CCompilerSyntaxNodeExpression_FE901AFC
{
	Expression = "function void	Eval()
{
	// warning : assumes centered in worldspace. should run in localspace if necessary.
	float3	normal = normalize(Position);
	float	globeSide = dot(normal, normalize(Position - ViewPosition));

	float	realSize = 0.0015;

	float	distToView = dot(Position - ViewPosition, ViewDirection);
	float	dofSignedDist = distToView - FocusDistance;
	float	dofDist = abs(dofSignedDist);
	
	float	cocFactor = pow(saturate((dofDist - FocusRange.y) / FocusRange.x), 2);
	float	cocScale = distToView * cocFactor;
	float	newSize = realSize + cocScale * MaxCocRadius;
	float	areaDiffusion = pow(realSize / newSize, 2);
	
//	float	cocBias = sqrt(min(realSize / (newSize - realSize), 100));	// hack
	TextureID = 3*cocFactor;// + 2*cocBias;
	
	float	lookupCursor = globeSide*0.5+0.5;
	
	// discard billboards that we won\'t see by using the \'SizeFactor\' curve
	// and bringing their size to zero (helps overdraw)
	Size = newSize * SizeFactor.sample(lookupCursor);

	Color = ColorLookup.sample(lookupCursor)*1.5;
	Color *= areaDiffusion.111x;
}
";
}
CActionFactoryParticleSpawnerBase	$LOCAL$/OuterShellRoot
{
	EditorInfosPosition = int2(-288, -61);
	EditorInfosIsBlockMinimized = 0;
	Descriptor = "$LOCAL$/CParticleDescriptor_302D7BAC";
	SpawnCount = 1.5000000e+000;
	FluxFactorExpression = "Subdivisions.y";
}
CParticleSamplerCurve	$LOCAL$/CParticleSamplerCurve_A0D1DCB3
{
	SamplerName = "ColorLookup";
	ValueType = Float4;
	Times = 
	{
		0.0000000e+000,
		1.7999999e-001,
		3.6581457e-001,
		4.0140980e-001,
		5.0000000e-001,
		7.5000000e-001,
		1.0000000e+000,
	};
	FloatValues = 
	{
		1.1568236e-001,
		6.9695163e-001,
		3.7024884e+000,
		0.0000000e+000,
		6.2752336e-001,
		1.2180737e+000,
		2.8744292e+000,
		0.0000000e+000,
		1.1186965e+000,
		1.0023683e+000,
		6.8990839e-001,
		9.5607825e-002,
		1.1281520e+000,
		5.0418472e-001,
		1.8964446e-001,
		2.5615387e-002,
		8.6818790e-001,
		6.9578791e-001,
		5.8582467e-001,
		1.6745840e-001,
		5.3675860e-002,
		6.4856291e-002,
		5.9864885e-001,
		0.0000000e+000,
		2.3396119e-002,
		5.5394351e-002,
		5.6190139e-001,
		0.0000000e+000,
	};
	FloatTangents = 
	{
		0.0000000e+000,
		0.0000000e+000,
		0.0000000e+000,
		0.0000000e+000,
		5.1101780e-001,
		4.8988727e-001,
		5.5567369e-002,
		0.0000000e+000,
		4.9849397e-001,
		2.6196340e-001,
		-1.5029305e+000,
		0.0000000e+000,
		5.1459694e-001,
		2.7042562e-001,
		-1.5514801e+000,
		0.0000000e+000,
		1.2664108e-001,
		-9.4424218e-001,
		-1.7639920e+000,
		2.0726573e-001,
		2.4259774e-002,
		-1.8088208e-001,
		-3.3791599e-001,
		3.9704494e-002,
		-3.5134446e-002,
		4.4339168e-001,
		2.4188606e-001,
		3.3612967e-002,
		-9.7313926e-002,
		1.2280878e+000,
		6.6996598e-001,
		9.3099788e-002,
		-9.0060979e-001,
		-7.6030588e-001,
		0.0000000e+000,
		-1.7324902e-002,
		-2.2837205e+000,
		-1.9279449e+000,
		0.0000000e+000,
		-4.3931607e-002,
		-1.0689083e-001,
		-3.7553348e-002,
		-8.0247156e-002,
		0.0000000e+000,
		-1.0689083e-001,
		-3.7553348e-002,
		-8.0247156e-002,
		0.0000000e+000,
		0.0000000e+000,
		0.0000000e+000,
		0.0000000e+000,
		0.0000000e+000,
		0.0000000e+000,
		0.0000000e+000,
		0.0000000e+000,
		0.0000000e+000,
	};
	MinLimits = float4(0.0000000e+000, 0.0000000e+000, 0.0000000e+000, 0.0000000e+000);
}
CParticleSamplerDoubleCurve	$LOCAL$/CParticleSamplerDoubleCurve_883D9345
{
	SamplerName = "ColorLookupDual";
	ValueType = Float4;
	Times = 
	{
		0.0000000e+000,
		5.0627506e-001,
		5.6300497e-001,
		1.0000000e+000,
	};
	FloatValues = 
	{
		1.8168707e+000,
		2.8539765e-001,
		5.1952869e-002,
		1.0000000e+000,
		1.0000000e+000,
		2.9566753e-001,
		5.1952869e-002,
		1.0000000e+000,
		1.8909180e-001,
		1.1157849e-001,
		1.0000000e+000,
		0.0000000e+000,
		1.8909180e-001,
		1.1157849e-001,
		1.0000000e+000,
		0.0000000e+000,
	};
	FloatTangents = 
	{
		0.0000000e+000,
		0.0000000e+000,
		0.0000000e+000,
		0.0000000e+000,
		0.0000000e+000,
		0.0000000e+000,
		0.0000000e+000,
		0.0000000e+000,
		-2.5722454e+000,
		0.0000000e+000,
		0.0000000e+000,
		0.0000000e+000,
		-2.8822914e-001,
		0.0000000e+000,
		0.0000000e+000,
		0.0000000e+000,
		0.0000000e+000,
		0.0000000e+000,
		0.0000000e+000,
		0.0000000e+000,
		0.0000000e+000,
		0.0000000e+000,
		0.0000000e+000,
		0.0000000e+000,
		0.0000000e+000,
		0.0000000e+000,
		0.0000000e+000,
		0.0000000e+000,
		0.0000000e+000,
		0.0000000e+000,
		0.0000000e+000,
		0.0000000e+000,
	};
	MinLimits = float4(0.0000000e+000, 0.0000000e+000, 0.0000000e+000, 0.0000000e+000);
	Times1 = 
	{
		0.0000000e+000,
		5.0627506e-001,
		5.6300497e-001,
		1.0000000e+000,
	};
	FloatValues1 = 
	{
		5.7321191e-002,
		5.9415448e-001,
		1.2842724e+000,
		1.0000000e+000,
		3.0834290e-001,
		4.0349793e-001,
		1.0036277e+000,
		1.0000000e+000,
		1.8909180e-001,
		1.1157849e-001,
		1.0000000e+000,
		0.0000000e+000,
		1.8909180e-001,
		1.1157849e-001,
		1.0000000e+000,
		0.0000000e+000,
	};
	FloatTangents1 = 
	{
		0.0000000e+000,
		0.0000000e+000,
		0.0000000e+000,
		0.0000000e+000,
		0.0000000e+000,
		0.0000000e+000,
		0.0000000e+000,
		0.0000000e+000,
		0.0000000e+000,
		0.0000000e+000,
		0.0000000e+000,
		0.0000000e+000,
		0.0000000e+000,
		0.0000000e+000,
		0.0000000e+000,
		0.0000000e+000,
		0.0000000e+000,
		0.0000000e+000,
		0.0000000e+000,
		0.0000000e+000,
		0.0000000e+000,
		0.0000000e+000,
		0.0000000e+000,
		0.0000000e+000,
		0.0000000e+000,
		0.0000000e+000,
		0.0000000e+000,
		0.0000000e+000,
		0.0000000e+000,
		0.0000000e+000,
		0.0000000e+000,
		0.0000000e+000,
	};
}
CParticleDescriptor	$LOCAL$/CParticleDescriptor_C31A1116
{
	EditorInfosPosition = int2(-392, -44);
	CustomFields = 
	{
		"$LOCAL$/CParticleFieldDeclaration_F370DA91",
		"$LOCAL$/CParticleFieldDeclaration_67015428",
	};
	SpawnEvaluator = "$LOCAL$/CCompilerSyntaxNodeExpression_4DE2F20B";
	States = 
	{
		"$LOCAL$/CParticleState_EBFB242A",
	};
}
CParticleFieldDeclaration	$LOCAL$/CParticleFieldDeclaration_F370DA91
{
	FieldName = "PolarAngles";
	FieldType = float2;
}
CParticleFieldDeclaration	$LOCAL$/CParticleFieldDeclaration_67015428
{
	FieldName = "ChildSpawnIntervalScale";
}
CCompilerSyntaxNodeExpression	$LOCAL$/CCompilerSyntaxNodeExpression_4DE2F20B
{
	EditorInfosPosition = int2(-508, 22);
	Expression = "function void	Eval()
{
	Life = 2.0;

//	float	realRadius = cos((spawner.LifeRatio - 0.5) * pi);
//	float	nSpawned = ceil(realRadius * 2 * 80 / (2 * pi));
//	ChildSpawnIntervalScale = realRadius / nSpawned;
	
	float	realRadius = cos((spawner.LifeRatio - 0.5) * pi);
	float	nSpawned = int(realRadius * 80*2) & -2;
	ChildSpawnIntervalScale = realRadius * 2*pi / nSpawned;

	float	angleOffset = floor((spawner.LifeRatio * 80) % 2) * 2 / nSpawned;
//	float	angleOffset = floor((spawner.LifeRatio * 80) % 2) * 0.5 / nSpawned;

	PolarAngles = frac(float2(angleOffset, spawner.LifeRatio));
	
	int3	pCoords = Sphere.buildParametricCoordsSphere(PolarAngles, 0);
	Position = Sphere.samplePosition(pCoords);
//	float2	ar = (PolarAngles + float2(0,-0.5)) * pi;
//	Position = float3(cos(ar.x) * cos(ar.y), sin(ar.y), sin(ar.x) * cos(ar.y));
}
";
}
CParticleState	$LOCAL$/CParticleState_EBFB242A
{
	EditorInfosPosition = int2(-508, 65);
	StateName = "State_0";
	Evolvers = 
	{
		"$LOCAL$/CParticleEvolver_Script_E6932135",
		"$LOCAL$/Hotspots",
	};
}
CParticleEvolver_Script	$LOCAL$/CParticleEvolver_Script_E6932135
{
	Expression = "$LOCAL$/CCompilerSyntaxNodeExpression_826C0D9C";
}
CCompilerSyntaxNodeExpression	$LOCAL$/CCompilerSyntaxNodeExpression_826C0D9C
{
	Expression = "function void	Eval()
{
	float2	angles = frac(PolarAngles + float2(LifeRatio, 0));
	int3	pCoords = Sphere.buildParametricCoordsSphere(angles, 0);
	Position = Sphere.samplePosition(pCoords);
//	float2	ar = (angles + float2(0,-0.5)) * pi;
//	Position = float3(cos(ar.x) * cos(ar.y), sin(ar.y), sin(ar.x) * cos(ar.y));
}
";
}
CParticleEvolver_Spawner	$LOCAL$/Hotspots
{
	SpawnInterval = 1.0000000e+000;
	CustomSpawnIntervalScaleField = "ChildSpawnIntervalScale";
	FirstSpawnDelay = 5.0000000e-001;
	Descriptor = "$LOCAL$/CParticleDescriptor_3CF398FE";
}
CParticleDescriptor	$LOCAL$/CParticleDescriptor_3CF398FE
{
	Renderer = "$LOCAL$/CParticleRenderer_Billboard_84CB8C99";
	CustomFields = 
	{
		"$LOCAL$/CParticleFieldDeclaration_5BA16AD0",
		"$LOCAL$/CParticleFieldDeclaration_36EBF9D3",
		"$LOCAL$/CParticleFieldDeclaration_7AD96392",
		"$LOCAL$/CParticleFieldDeclaration_784F2078",
		"$LOCAL$/CParticleFieldDeclaration_D02F51E4",
		"$LOCAL$/CParticleFieldDeclaration_A7C0891A",
		"$LOCAL$/CParticleFieldDeclaration_EF820103",
		"$LOCAL$/CParticleFieldDeclaration_EC634432",
		"$LOCAL$/CParticleFieldDeclaration_6EFB27A7",
	};
	Samplers = 
	{
		"$LOCAL$/CParticleSamplerDoubleCurve_883D9345",
		"$LOCAL$/CParticleSamplerCurve_621F60EC",
	};
	SpawnEvaluator = "$LOCAL$/CCompilerSyntaxNodeExpression_4BED20BD";
	States = 
	{
		"$LOCAL$/CParticleState_BFAEBFC4",
	};
}
CParticleRenderer_Billboard	$LOCAL$/CParticleRenderer_Billboard_84CB8C99
{
	Diffuse = "Textures/FX/hexagon_bokeh.dds";
	AtlasDefinition = "Textures/FX/hexagon_bokeh.pkat";
	SoftAnimationBlending = true;
	BillboardMode = PlanarAlignedQuad;
	AxisField = "Tangent";
	Axis2Field = "NormalForAlignment";
	AxisScale = 1.0000000e+000;
}
CParticleFieldDeclaration	$LOCAL$/CParticleFieldDeclaration_5BA16AD0
{
	FieldName = "Color";
	FieldType = float4;
}
CParticleFieldDeclaration	$LOCAL$/CParticleFieldDeclaration_36EBF9D3
{
	FieldName = "Brightness";
}
CParticleFieldDeclaration	$LOCAL$/CParticleFieldDeclaration_7AD96392
{
	FieldName = "Normal";
	FieldType = float3;
	TransformFilter = rotate;
}
CCompilerSyntaxNodeExpression	$LOCAL$/CCompilerSyntaxNodeExpression_4BED20BD
{
	Expression = "// since 1.7.0 we can just declare \'PostEval\' without \'Eval\'
function void	PostEval()
{
	// could be done in \'Eval\'
//	float	lookup = GlobeLookup.sample(-parent.PolarAngles).z;
//	Life = select(0,2,lookup > 0.5);
	Size = 0.0075;
	
	Brightness = OverbrightProbability.sample(rand(0,1));
	ChildLife = rand(0.5,1.5);
	
	// only bright enough particles will spawn trails
	SpawnMetricScale = select(infinity, 1, Brightness > 1);	// main thin & bright beacon
	SpawnMetricScale2 = select(infinity, 1, Brightness > 0.5);	// ghostly secondaty beacon


	// must be done in \'PostEval\'
	float2	angles = frac(parent.PolarAngles + float2(spawner.LifeRatio, 0));
//	float	imgLookup = GlobeLookup.sample(-angles).b;	// Blue channel : main land
	int3	pCoords = Sphere.buildParametricCoordsSphere(angles, 0);
	Position = Sphere.samplePosition(pCoords);
//	float2	ar = (angles + float2(0,-0.5)) * pi;
//	Position = float3(cos(ar.x) * cos(ar.y), sin(ar.y), sin(ar.x) * cos(ar.y));
	
	Normal = normalize(Position);
	NormalForAlignment = Normal;
	Tangent = cross(Normal, scene.axisUp());

	float	killer = noise(Position*6);
	Life = select(0, infinity, killer > 0.2);
}
";
}
CParticleState	$LOCAL$/CParticleState_BFAEBFC4
{
	StateName = "State_0";
	Evolvers = 
	{
		"$LOCAL$/CParticleEvolver_Script_8B0CB7D7",
		"$LOCAL$/Beacon1",
		"$LOCAL$/Beacon2",
		"$LOCAL$/Beacon3",
	};
}
CParticleEvolver_Script	$LOCAL$/CParticleEvolver_Script_8B0CB7D7
{
	Expression = "$LOCAL$/CCompilerSyntaxNodeExpression_033E37E6";
}
CCompilerSyntaxNodeExpression	$LOCAL$/CCompilerSyntaxNodeExpression_033E37E6
{
	Expression = "function void	Eval()
{
	float3	rot_normal = rotate(Normal, float3(0,1,0), scene.Time*RotationSpeed*0.3);
	Position = rot_normal;

	float	globeSide = dot(rot_normal, normalize(Position - ViewPosition));
	
	float	distToView = dot(Position - ViewPosition, ViewDirection);
	float	dofSignedDist = distToView - FocusDistance;
	float	dofDist = abs(dofSignedDist);
	
	float	dofFactor = min(1, max(0, dofDist - FocusRange.y) / FocusRange.x);
	float	dofFactorNonLin = pow(dofFactor,2);

	float	cocFactor = dofFactorNonLin;
	float	cocScale = distToView * cocFactor;
	
	float	realSize = 0.037;
	float	newSize = realSize + cocScale * MaxCocRadius;
	float	areaDiffusion = pow(realSize / newSize, 2);
	
//	float	cocBias = sqrt(min(realSize / (newSize - realSize), 100));	// hack
	TextureID = 6*cocFactor;// + 2*cocBias;
	
	NormalForAlignment = safe_normalize(lerp(rot_normal, -ViewDirection, cocFactor), rot_normal);
	
	Size = newSize;
	
	float	colorVar = noise(float4(Position*5, scene.Time*0.5)) * 0.5 + 0.5;
	
	// grab a random 1D brightness variation based on time and position
	float	brightnessVar = 0.5 + 4 * (noise(scene.Time*4 + dot(Position, float3(100, 200, 300))) * 0.5 + 0.5);
	
	GlobeSide = globeSide;

	Color = ColorLookupDual.sample(globeSide*0.5+0.5, pow(colorVar,2));
	Color *= float4(Brightness.xxx * brightnessVar, areaDiffusion);
}
";
}
CActionFactoryParticleSpawnerBase	$LOCAL$/HotspotsRoot
{
	EditorInfosPosition = int2(-288, -61);
	EditorInfosIsBlockMinimized = 0;
	Descriptor = "$LOCAL$/CParticleDescriptor_C31A1116";
	SpawnCount = 8.0000000e+001;
}
CParticleFieldDeclaration	$LOCAL$/CParticleFieldDeclaration_784F2078
{
	FieldName = "Tangent";
	FieldType = float3;
	TransformFilter = rotate;
}
CParticleSamplerCurve	$LOCAL$/CParticleSamplerCurve_621F60EC
{
	SamplerName = "OverbrightProbability";
	Times = 
	{
		0.0000000e+000,
		7.9999995e-001,
		9.3615675e-001,
		9.5436156e-001,
		1.0000000e+000,
	};
	FloatValues = 
	{
		8.6254999e-002,
		3.5458249e-001,
		9.2609811e-001,
		3.2614160e+000,
		3.2614160e+000,
	};
	FloatTangents = 
	{
		0.0000000e+000,
		0.0000000e+000,
		5.1180452e-001,
		1.4576545e+000,
		5.5810320e-003,
		7.4621040e-004,
		0.0000000e+000,
		0.0000000e+000,
		0.0000000e+000,
		0.0000000e+000,
	};
	MinLimits = float4(0.0000000e+000, 0.0000000e+000, 0.0000000e+000, 0.0000000e+000);
}
CParticleFieldDeclaration	$LOCAL$/CParticleFieldDeclaration_D02F51E4
{
	FieldName = "SpawnMetricScale";
}
CParticleEvolver_Spawner	$LOCAL$/Beacon1
{
	EditorInfosIsBlockMinimized = 0;
	SpawnMetric = Time;
	SpawnInterval = 2.0000000e-002;
	CustomSpawnIntervalScaleField = "SpawnMetricScale";
	Descriptor = "$LOCAL$/CParticleDescriptor_8F195106";
}
CParticleState	$LOCAL$/CParticleState_1A11A477
{
	StateName = "State_0";
	Evolvers = 
	{
		"$LOCAL$/CParticleEvolver_Physics_72F1473B",
		"$LOCAL$/Script_4",
		"$LOCAL$/Script_5",
	};
}
CParticleDescriptor	$LOCAL$/CParticleDescriptor_8F195106
{
	Renderer = "$LOCAL$/CParticleRenderer_Billboard_D829C898";
	CustomFields = 
	{
		"$LOCAL$/CParticleFieldDeclaration_E190F0E5",
		"$LOCAL$/CParticleFieldDeclaration_B72992EE",
	};
	Samplers = 
	{
		"$LOCAL$/CParticleSamplerCurve_810B1549",
	};
	SpawnEvaluator = "$LOCAL$/CCompilerSyntaxNodeExpression_E2F02141";
	States = 
	{
		"$LOCAL$/CParticleState_1A11A477",
	};
}
CCompilerSyntaxNodeExpression	$LOCAL$/CCompilerSyntaxNodeExpression_E2F02141
{
	Expression = "function void	Eval()
{
	Life = parent.ChildLife*0.2;
	Size = 0.01;
	
	BaseColor = BrightnessLookup.sample(parent.GlobeSide * 0.5 + 0.5) * 0.5 * parent.Color.rgb1;
	Color = BaseColor;
}

function void	PostEval()
{
	float3	rot_normal = rotate(parent.Normal, float3(0,1,0), scene.Time*RotationSpeed*0.3);
	Velocity = rot_normal;
	Position += Velocity * 0.25 * 0.1;
}
";
}
CParticleRenderer_Billboard	$LOCAL$/CParticleRenderer_Billboard_D829C898
{
	Diffuse = "Textures/FX/bokeh_x3.dds";
	AtlasDefinition = "Textures/FX/bokeh_x3.pkat";
	SoftAnimationBlending = true;
	BillboardMode = VelocitySpheroidalAlign;
}
CParticleEvolver_Physics	$LOCAL$/CParticleEvolver_Physics_72F1473B
{
}
CParticleFieldDeclaration	$LOCAL$/CParticleFieldDeclaration_A7C0891A
{
	FieldName = "GlobeSide";
}
CParticleFieldDeclaration	$LOCAL$/CParticleFieldDeclaration_E190F0E5
{
	FieldName = "Color";
	FieldType = float4;
}
CCompilerSyntaxNodeExpression	$LOCAL$/CCompilerSyntaxNodeExpression_D68E4940
{
	Expression = "function void	Eval()
{
	float2	n = IntensityDecay.sample(LifeRatio);
	Color = BaseColor * n.x;
	Size = 0.02 * n.y;
}
";
}
CParticleSamplerCurve	$LOCAL$/CParticleSamplerCurve_BCF9D0E2
{
	SamplerName = "BrightnessLookup";
	Times = 
	{
		0.0000000e+000,
		2.9999998e-001,
		6.9999999e-001,
		1.0000000e+000,
	};
	FloatValues = 
	{
		1.0000000e+000,
		1.0000000e+000,
		2.5000000e-001,
		2.5000000e-001,
	};
	FloatTangents = 
	{
		0.0000000e+000,
		0.0000000e+000,
		0.0000000e+000,
		0.0000000e+000,
		0.0000000e+000,
		0.0000000e+000,
		0.0000000e+000,
		0.0000000e+000,
	};
	MinLimits = float4(0.0000000e+000, 0.0000000e+000, 0.0000000e+000, 0.0000000e+000);
}
CParticleFieldDeclaration	$LOCAL$/CParticleFieldDeclaration_B72992EE
{
	FieldName = "BaseColor";
	FieldType = float4;
}
CParticleSamplerCurve	$LOCAL$/CParticleSamplerCurve_810B1549
{
	SamplerName = "IntensityDecay";
	ValueType = Float2;
	Times = 
	{
		0.0000000e+000,
		1.0000000e+000,
	};
	FloatValues = 
	{
		1.0000000e+000,
		1.6940445e-001,
		0.0000000e+000,
		3.8923395e-001,
	};
	FloatTangents = 
	{
		0.0000000e+000,
		0.0000000e+000,
		-2.8603439e+000,
		3.3490351e-001,
		0.0000000e+000,
		8.9960016e-002,
		0.0000000e+000,
		0.0000000e+000,
	};
	MinLimits = float4(0.0000000e+000, 0.0000000e+000, 0.0000000e+000, 0.0000000e+000);
}
CParticleEvolver_Script	$LOCAL$/Script_4
{
	Expression = "$LOCAL$/CCompilerSyntaxNodeExpression_D68E4940";
}
CParticleFieldDeclaration	$LOCAL$/CParticleFieldDeclaration_EF820103
{
	FieldName = "ChildLife";
}
CParticleEvolver_Script	$LOCAL$/Script_5
{
	Expression = "$LOCAL$/CCompilerSyntaxNodeExpression_12076282";
}
CCompilerSyntaxNodeExpression	$LOCAL$/CCompilerSyntaxNodeExpression_12076282
{
	Expression = "function void	Eval()
{
	float	distToView = dot(Position - ViewPosition, ViewDirection);
	float	dofSignedDist = distToView - FocusDistance;
	float	dofDist = abs(dofSignedDist);
	
	float	dofFactor = min(1, max(0, dofDist - FocusRange.y) / FocusRange.x);
	float	dofFactorNonLin = pow(dofFactor,2);

	float	cocFactor = dofFactorNonLin;
	float	cocScale = distToView * cocFactor;
	
	float	realSize = Size;
	float	newSize = realSize + cocScale * MaxCocRadius;
	float	areaDiffusion = pow(realSize / newSize, 2);
	
//	float	cocBias = sqrt(min(realSize / (newSize - realSize), 100));	// hack
	TextureID = 3*cocFactor;// + 2*cocBias;
	
	Size = newSize;
	Color *= (areaDiffusion).111x;
}
";
}
CActionFactoryParticleSpawnerBase	$LOCAL$/RingsRoot
{
	EditorInfosIsBlockMinimized = 0;
	Descriptor = "$LOCAL$/CParticleDescriptor_EDD2926D";
	SpawnCount = 1.0000000e+001;
}
CParticleDescriptor	$LOCAL$/CParticleDescriptor_EDD2926D
{
	CustomFields = 
	{
		"$LOCAL$/CParticleFieldDeclaration_96037D2F",
		"$LOCAL$/CParticleFieldDeclaration_D3A637E4",
		"$LOCAL$/CParticleFieldDeclaration_667D8F41",
	};
	Samplers = 
	{
		"$LOCAL$/CParticleSamplerCurve_DFE73C1E",
	};
	SpawnEvaluator = "$LOCAL$/CCompilerSyntaxNodeExpression_31D33B34";
	States = 
	{
		"$LOCAL$/CParticleState_D6B8ABD6",
	};
}
CCompilerSyntaxNodeExpression	$LOCAL$/CCompilerSyntaxNodeExpression_31D33B34
{
	Expression = "function void	Eval()
{
	Life = 2.0;
	
	float2	ringDistributions = RingsRadiusDistributions.sample(spawner.LifeRatio);
	
	Radius = 1.05 + ringDistributions.x * 0.3f;
	SpawnIntervalScale = rcp(ringDistributions.y * Radius);	// scale by radius to get constant distribution
	RingColorGradient = spawner.LifeRatio;

	// reproduce position code for trail spawner:
	Position = float3(sin(0), 0, cos(0)) * Radius;
}
";
}
CParticleSamplerCurve	$LOCAL$/CParticleSamplerCurve_CFCDC53B
{
	SamplerName = "RingColorPalette";
	ValueType = Float4;
	Times = 
	{
		0.0000000e+000,
		1.2149172e-001,
		3.0353978e-001,
		3.9999998e-001,
		6.2364095e-001,
		8.1630850e-001,
		1.0000000e+000,
	};
	FloatValues = 
	{
		4.2481929e-001,
		5.0362086e-001,
		9.0114069e-001,
		1.0000000e+000,
		4.2481929e-001,
		5.0362086e-001,
		9.0114069e-001,
		1.0000000e+000,
		4.2481929e-001,
		5.0362086e-001,
		9.0114069e-001,
		5.9467685e-001,
		4.2481929e-001,
		5.0362086e-001,
		9.0114069e-001,
		1.0000000e+000,
		4.2481929e-001,
		5.0362086e-001,
		9.0114069e-001,
		2.1901141e-001,
		4.2481929e-001,
		5.0362086e-001,
		9.0114069e-001,
		1.0000000e+000,
		4.2481929e-001,
		5.0362086e-001,
		9.0114069e-001,
		1.0000000e+000,
	};
	FloatTangents = 
	{
		0.0000000e+000,
		0.0000000e+000,
		0.0000000e+000,
		0.0000000e+000,
		0.0000000e+000,
		0.0000000e+000,
		0.0000000e+000,
		0.0000000e+000,
		0.0000000e+000,
		0.0000000e+000,
		0.0000000e+000,
		0.0000000e+000,
		0.0000000e+000,
		0.0000000e+000,
		0.0000000e+000,
		-1.1734788e+000,
		0.0000000e+000,
		0.0000000e+000,
		0.0000000e+000,
		0.0000000e+000,
		0.0000000e+000,
		0.0000000e+000,
		0.0000000e+000,
		1.1295667e+000,
		0.0000000e+000,
		0.0000000e+000,
		0.0000000e+000,
		0.0000000e+000,
		0.0000000e+000,
		0.0000000e+000,
		0.0000000e+000,
		-2.1545105e+000,
		0.0000000e+000,
		0.0000000e+000,
		0.0000000e+000,
		0.0000000e+000,
		0.0000000e+000,
		0.0000000e+000,
		0.0000000e+000,
		0.0000000e+000,
		0.0000000e+000,
		0.0000000e+000,
		0.0000000e+000,
		1.9242971e+000,
		0.0000000e+000,
		0.0000000e+000,
		0.0000000e+000,
		0.0000000e+000,
		0.0000000e+000,
		0.0000000e+000,
		0.0000000e+000,
		0.0000000e+000,
		0.0000000e+000,
		0.0000000e+000,
		0.0000000e+000,
		0.0000000e+000,
	};
	MinLimits = float4(0.0000000e+000, 0.0000000e+000, 0.0000000e+000, 0.0000000e+000);
}
CParticleState	$LOCAL$/CParticleState_D6B8ABD6
{
	StateName = "State_0";
	Evolvers = 
	{
		"$LOCAL$/Script_6",
		"$LOCAL$/Rings",
	};
}
CParticleEvolver_Script	$LOCAL$/Script_6
{
	Expression = "$LOCAL$/CCompilerSyntaxNodeExpression_864879BC";
}
CCompilerSyntaxNodeExpression	$LOCAL$/CCompilerSyntaxNodeExpression_864879BC
{
	Expression = "function void	Eval()
{
	float	a = LifeRatio * 2 * pi;
	Position = float3(sin(a), 0, cos(a)) * Radius;
}
";
}
CParticleFieldDeclaration	$LOCAL$/CParticleFieldDeclaration_96037D2F
{
	FieldName = "Radius";
}
CParticleSamplerCurve	$LOCAL$/CParticleSamplerCurve_DFE73C1E
{
	SamplerName = "RingsRadiusDistributions";
	ValueType = Float2;
	Times = 
	{
		0.0000000e+000,
		2.5279704e-001,
		5.2307773e-001,
		7.6792014e-001,
		1.0000000e+000,
	};
	FloatValues = 
	{
		0.0000000e+000,
		1.0000000e+000,
		5.0249308e-002,
		6.2836832e-001,
		3.6106297e-001,
		4.4053549e-001,
		7.9620206e-001,
		1.0000000e+000,
		1.0000000e+000,
		2.7994838e-001,
	};
	FloatTangents = 
	{
		0.0000000e+000,
		0.0000000e+000,
		0.0000000e+000,
		0.0000000e+000,
		0.0000000e+000,
		-1.1778870e+000,
		0.0000000e+000,
		0.0000000e+000,
		0.0000000e+000,
		-6.4913869e-001,
		0.0000000e+000,
		0.0000000e+000,
		0.0000000e+000,
		0.0000000e+000,
		0.0000000e+000,
		-1.5584493e+000,
		4.1217113e-001,
		0.0000000e+000,
		0.0000000e+000,
		0.0000000e+000,
	};
	MinLimits = float4(0.0000000e+000, 0.0000000e+000, 0.0000000e+000, 0.0000000e+000);
}
CParticleEvolver_Spawner	$LOCAL$/Rings
{
	SpawnInterval = 4.9999999e-003;
	CustomSpawnIntervalScaleField = "SpawnIntervalScale";
	Descriptor = "$LOCAL$/CParticleDescriptor_C22FCCF0";
}
CParticleState	$LOCAL$/CParticleState_EBC85E39
{
	StateName = "State_0";
	Evolvers = 
	{
		"$LOCAL$/Script_7",
	};
}
CParticleDescriptor	$LOCAL$/CParticleDescriptor_C22FCCF0
{
	Renderer = "$LOCAL$/CParticleRenderer_Billboard_786FCCB2";
	CustomFields = 
	{
		"$LOCAL$/CParticleFieldDeclaration_C74D8706",
		"$LOCAL$/CParticleFieldDeclaration_48ECCE98",
		"$LOCAL$/CParticleFieldDeclaration_0577DF1A",
		"$LOCAL$/CParticleFieldDeclaration_894FFEE5",
	};
	Samplers = 
	{
		"$LOCAL$/CParticleSamplerCurve_CFCDC53B",
	};
	SpawnEvaluator = "$LOCAL$/CCompilerSyntaxNodeExpression_3B2AF673";
	States = 
	{
		"$LOCAL$/CParticleState_EBC85E39",
	};
}
CCompilerSyntaxNodeExpression	$LOCAL$/CCompilerSyntaxNodeExpression_3B2AF673
{
	Expression = "// do everything in PostEval() -> since 1.7.0 we can have just PostEval() without Eval().
// so if we need to do stuff in PostEval(), and the stuff done in Eval() can be moved to Eval(),
// it will be more efficient if the popcorn runtime just has to call a single function.

function void	PostEval()
{
	// could be done in \'Eval\'
	Life = infinity;
	Size = 0.006;
	float	overbright = saturate(pow(rand(0,1),4)*1-0.5)*0.7+0.6;
	RingKey = parent.RingColorGradient;
	BaseColor = overbright * RingColorPalette.sample(RingKey);

	// must be done in \'PostEval\'
	float	a = spawner.LifeRatio * 2 * pi;
	Position = rotate(float3(sin(a), 0, cos(a)) * parent.Radius, normalize(float3(1,0,-0.7)), 0.3);
	BasePosition = Position;
}";
}
CParticleRenderer_Billboard	$LOCAL$/CParticleRenderer_Billboard_786FCCB2
{
	Diffuse = "Textures/FX/bokeh_x3.dds";
	AtlasDefinition = "Textures/FX/bokeh_x3.pkat";
	SoftAnimationBlending = true;
}
CParticleFieldDeclaration	$LOCAL$/CParticleFieldDeclaration_D3A637E4
{
	FieldName = "SpawnIntervalScale";
}
CParticleEvolver_Script	$LOCAL$/Script_7
{
	Expression = "$LOCAL$/CCompilerSyntaxNodeExpression_C3BF8277";
}
CCompilerSyntaxNodeExpression	$LOCAL$/CCompilerSyntaxNodeExpression_C3BF8277
{
	Expression = "function void	Eval()
{
	float3	normal = normalize(Position);
	float	globeSide = -dot(normal, normalize(Position - ViewPosition)) * 0.5 + 0.5;
	float	colorIntensity = pow(noise(float3(Position.xz*5,scene.Time*0.7))*0.5+0.5,2)*2+0.1;
	Color = BaseColor * (colorIntensity * globeSide).xxx1;
//	Position = BasePosition + 0.01*normal * noise(scene.Time + dot(BasePosition, float3(100,200,300)));

	float	amplitude = lerp(0.001, 0.02, saturate(RingKey - (scene.Time*2 % 4))*3);
	Position = BasePosition + amplitude*normal * noise(float3(BasePosition.xz*20, scene.Time));
	
	float	realSize = 0.005;
	
	
	float	distToView = dot(Position - ViewPosition, ViewDirection);
	float	dofSignedDist = distToView - FocusDistance;
	float	dofDist = abs(dofSignedDist);
	
	float	dofFactor = min(1, max(0, dofDist - FocusRange.y) / FocusRange.x);
	float	dofFactorNonLin = pow(dofFactor,2);

	float	cocFactor = dofFactorNonLin;
	float	cocScale = distToView * cocFactor;
	
	float	newSize = realSize + cocScale * MaxCocRadius;
	float	areaDiffusion = pow(realSize / newSize, 2);
	
//	float	cocBias = sqrt(min(realSize / (newSize - realSize), 100));	// hack
	TextureID = 3*cocFactor;// + 2*cocBias;
	
	Size = newSize;
	Color *= (areaDiffusion).111x;
}
";
}
CParticleFieldDeclaration	$LOCAL$/CParticleFieldDeclaration_C74D8706
{
	FieldName = "Color";
	FieldType = float4;
}
CParticleFieldDeclaration	$LOCAL$/CParticleFieldDeclaration_667D8F41
{
	FieldName = "RingColorGradient";
}
CParticleFieldDeclaration	$LOCAL$/CParticleFieldDeclaration_48ECCE98
{
	FieldName = "BaseColor";
	FieldType = float4;
}
CParticleFieldDeclaration	$LOCAL$/CParticleFieldDeclaration_0577DF1A
{
	FieldName = "BasePosition";
	FieldType = float3;
	TransformFilter = full;
}
CParticleFieldDeclaration	$LOCAL$/CParticleFieldDeclaration_894FFEE5
{
	FieldName = "RingKey";
	TransformFilter = full;
}
CActionFactoryParticleSpawnerBase	$LOCAL$/Transient
{
	EditorInfosIsBlockMinimized = 0;
	Descriptor = "$LOCAL$/CParticleDescriptor_8D46650C";
	DurationInSeconds = 2.0000000e+000;
	SpawnCount = 9.0000000e+003;
}
CParticleDescriptor	$LOCAL$/CParticleDescriptor_8D46650C
{
	Renderer = "$LOCAL$/CParticleRenderer_Billboard_872A08EE";
	CustomFields = 
	{
		"$LOCAL$/CParticleFieldDeclaration_DD9F3081",
		"$LOCAL$/CParticleFieldDeclaration_C83268D8",
		"$LOCAL$/CParticleFieldDeclaration_02AF575A",
	};
	SpawnEvaluator = "$LOCAL$/CCompilerSyntaxNodeExpression_7BA722BF";
	States = 
	{
		"$LOCAL$/CParticleState_9639C349",
	};
}
CCompilerSyntaxNodeExpression	$LOCAL$/CCompilerSyntaxNodeExpression_7BA722BF
{
	Expression = "function void	Eval()
{
	Life = infinity;
	Size = 0.005;
	
	BasePosition = Sphere.samplePosition();
	Normal = normalize(BasePosition);
	Position = BasePosition;
}
";
}
CParticleRenderer_Billboard	$LOCAL$/CParticleRenderer_Billboard_872A08EE
{
	Diffuse = "Textures/FX/bokeh_x3.dds";
	AtlasDefinition = "Textures/FX/bokeh_x3.pkat";
	SoftAnimationBlending = true;
}
CParticleState	$LOCAL$/CParticleState_9639C349
{
	StateName = "State_0";
	Evolvers = 
	{
		"$LOCAL$/Script_8",
	};
}
CParticleFieldDeclaration	$LOCAL$/CParticleFieldDeclaration_C83268D8
{
	FieldName = "Normal";
	FieldType = float3;
	TransformFilter = rotate;
}
CParticleFieldDeclaration	$LOCAL$/CParticleFieldDeclaration_DD9F3081
{
	FieldName = "BasePosition";
	FieldType = float3;
	TransformFilter = full;
}
CParticleEvolver_Script	$LOCAL$/Script_8
{
	Expression = "$LOCAL$/CCompilerSyntaxNodeExpression_CC9A4C7B";
}
CCompilerSyntaxNodeExpression	$LOCAL$/CCompilerSyntaxNodeExpression_CC9A4C7B
{
	Expression = "function void	Eval()
{
	float	displace = (noise(float3(BasePosition.xz*100, scene.Time * 0.04)) * 0.5 + 0.5) * 0.7;
	Position = BasePosition + Normal * displace;
	
	float	colorIntensity = pow(noise(float3(Position.xz*8,scene.Time*0.5))*0.5+0.5,8)*4+0.1;
	Color = float4(1,0.7,0.5,1) * colorIntensity.xxx1;

	float	realSize = 0.0018;
	
	float	distToView = dot(Position - ViewPosition, ViewDirection);
	float	dofSignedDist = distToView - FocusDistance;
	float	dofDist = abs(dofSignedDist);
	
	float	dofFactor = min(1, max(0, dofDist - FocusRange.y) / FocusRange.x);
	float	dofFactorNonLin = pow(dofFactor,2);

	float	cocFactor = dofFactorNonLin;
	float	cocScale = distToView * cocFactor;
	
	float	newSize = realSize + cocScale * MaxCocRadius;
	float	areaDiffusion = pow(realSize / newSize, 2);
	
//	float	cocBias = sqrt(min(realSize / (newSize - realSize), 100));	// hack
	TextureID = 3*cocFactor;// + 2*cocBias;
	
	Size = newSize;
	Color *= (areaDiffusion).111x;
}
";
}
CParticleFieldDeclaration	$LOCAL$/CParticleFieldDeclaration_02AF575A
{
	FieldName = "Color";
	FieldType = float4;
}
CActionFactoryParticleSpawnerBase	$LOCAL$/EjectionsARoot
{
	Descriptor = "$LOCAL$/CParticleDescriptor_45E4BC25";
	Infinite = true;
	DurationInSeconds = 2.0000000e+000;
	SpawnCount = 3.0000000e+002;
}
CParticleDescriptor	$LOCAL$/CParticleDescriptor_45E4BC25
{
	Renderer = "$LOCAL$/CParticleRenderer_Billboard_BD8C86EB";
	CustomFields = 
	{
		"$LOCAL$/CParticleFieldDeclaration_6F267947",
		"$LOCAL$/CParticleFieldDeclaration_9C423715",
		"$LOCAL$/CParticleFieldDeclaration_3C44704D",
	};
	SpawnEvaluator = "$LOCAL$/CCompilerSyntaxNodeExpression_A32F4B4C";
	States = 
	{
		"$LOCAL$/CParticleState_70F36D2E",
	};
}
CCompilerSyntaxNodeExpression	$LOCAL$/CCompilerSyntaxNodeExpression_A32F4B4C
{
	Expression = "function void	Eval()
{
	Position = Sphere.samplePosition();
	Normal = normalize(Position);

	float	killer = noise(Position*8);
	Life = select(0, 2, killer > 0.6);
}
";
}
CParticleState	$LOCAL$/CParticleState_70F36D2E
{
	StateName = "State_0";
	Evolvers = 
	{
		"$LOCAL$/Field_1",
		"$LOCAL$/Script_10",
		"$LOCAL$/EjectionsA",
	};
}
CParticleEvolver_Spawner	$LOCAL$/EjectionsA
{
	SpawnMetric = Time;
	SpawnInterval = 7.5000003e-002;
	Descriptor = "$LOCAL$/CParticleDescriptor_EEF5FE43";
}
CParticleState	$LOCAL$/CParticleState_80580180
{
	StateName = "State_0";
	Evolvers = 
	{
		"$LOCAL$/Script_9",
	};
}
CParticleDescriptor	$LOCAL$/CParticleDescriptor_EEF5FE43
{
	Renderer = "$LOCAL$/CParticleRenderer_Billboard_3F7395AD";
	CustomFields = 
	{
		"$LOCAL$/CParticleFieldDeclaration_78D3AB91",
		"$LOCAL$/CParticleFieldDeclaration_70C3F928",
		"$LOCAL$/CParticleFieldDeclaration_F920612A",
		"$LOCAL$/CParticleFieldDeclaration_11764070",
		"$LOCAL$/CParticleFieldDeclaration_5D70AFF3",
	};
	Samplers = 
	{
		"$LOCAL$/CParticleSamplerCurve_C4D7FB0B",
	};
	SpawnEvaluator = "$LOCAL$/CCompilerSyntaxNodeExpression_68A088C2";
	States = 
	{
		"$LOCAL$/CParticleState_80580180",
	};
}
CCompilerSyntaxNodeExpression	$LOCAL$/CCompilerSyntaxNodeExpression_68A088C2
{
	Expression = "function void	Eval()
{
	Life = rand(3, 5);
	float3	rot_normal = rotate(parent.Normal, float3(0,1,0), scene.Time*RotationSpeed*0.3);
	Normal = rot_normal;
	Brightness = (1 - spawner.LifeRatio) * (pow(ninja,4)*2 + 0.5) * BrightnessLookup.sample(parent.GlobeSide * 0.5 + 0.5);
	Offset = spawner.LifeRatio;
}
";
}
CParticleRenderer_Billboard	$LOCAL$/CParticleRenderer_Billboard_3F7395AD
{
	Diffuse = "Textures/FX/bokeh_x3.dds";
	AtlasDefinition = "Textures/FX/bokeh_x3.pkat";
	SoftAnimationBlending = true;
	BillboardMode = VelocityCapsuleAlign;
	AxisField = "Normal";
	AxisScale = 2.0000000e-002;
}
CParticleFieldDeclaration	$LOCAL$/CParticleFieldDeclaration_78D3AB91
{
	FieldName = "Color";
	FieldType = float4;
}
CParticleFieldDeclaration	$LOCAL$/CParticleFieldDeclaration_6F267947
{
	FieldName = "Normal";
	FieldType = float3;
	TransformFilter = rotate;
}
CParticleEvolver_Script	$LOCAL$/Script_9
{
	Expression = "$LOCAL$/CCompilerSyntaxNodeExpression_1B415E16";
}
CCompilerSyntaxNodeExpression	$LOCAL$/CCompilerSyntaxNodeExpression_1B415E16
{
	Expression = "function void	Eval()
{
	float	displace = (noise(float3(BasePosition.xz*100, LifeRatio*2 + Offset*100)) * 0.5 + 0.5) * 0.7;
	Position = BasePosition + Normal * 0.5 * displace;

	Color = ColorLookup.sample(LifeRatio) * Brightness;

	float	realSize = 0.004;

	float	distToView = dot(Position - ViewPosition, ViewDirection);
	float	dofSignedDist = distToView - FocusDistance;
	float	dofDist = abs(dofSignedDist);
	
	float	dofFactor = min(1, max(0, dofDist - FocusRange.y) / FocusRange.x);
	float	dofFactorNonLin = pow(dofFactor,2);

	float	cocFactor = dofFactorNonLin;
	float	cocScale = distToView * cocFactor;
	
	float	newSize = realSize + cocScale * MaxCocRadius;
	float	areaDiffusion = pow(realSize / newSize, 2);
	
//	float	cocBias = sqrt(min(realSize / (newSize - realSize), 100));	// hack
	TextureID = 3*cocFactor;// + 2*cocBias;
	
	Size = newSize;
	Color *= (areaDiffusion).111x;
}
";
}
CParticleFieldDeclaration	$LOCAL$/CParticleFieldDeclaration_70C3F928
{
	FieldName = "Normal";
	FieldType = float3;
	TransformFilter = rotate;
}
CParticleAttributeDeclaration	$LOCAL$/CParticleAttributeDeclaration_FC00091B
{
	AttributeName = "RotationSpeed";
	HasMin = true;
	HasMax = true;
	MaxValueF4 = float4(2.0000000e+000, 1.0000000e+000, 1.0000000e+000, 1.0000000e+000);
	MaxValueI4 = int4(10, 10, 10, 10);
}
CParticleSamplerCurve	$LOCAL$/CParticleSamplerCurve_C4D7FB0B
{
	SamplerName = "ColorLookup";
	ValueType = Float4;
	Times = 
	{
		0.0000000e+000,
		1.4999999e-001,
		5.2199745e-001,
		7.0101136e-001,
		8.4999996e-001,
		1.0000000e+000,
	};
	FloatValues = 
	{
		2.9163778e+000,
		2.6652601e+000,
		2.3624818e+000,
		0.0000000e+000,
		1.1744095e+001,
		2.2664750e+000,
		1.9871552e+000,
		1.0000000e+000,
		2.9398355e+000,
		7.1825099e-001,
		3.9201516e-001,
		1.0000000e+000,
		2.9398355e+000,
		7.1825099e-001,
		3.9201516e-001,
		1.0000000e+000,
		2.9398355e+000,
		7.1825099e-001,
		3.9201516e-001,
		1.0000000e+000,
		2.9398355e+000,
		7.1825099e-001,
		3.9201516e-001,
		0.0000000e+000,
	};
	FloatTangents = 
	{
		0.0000000e+000,
		0.0000000e+000,
		0.0000000e+000,
		0.0000000e+000,
		0.0000000e+000,
		0.0000000e+000,
		0.0000000e+000,
		0.0000000e+000,
		-4.2769542e+000,
		-1.3728957e+000,
		-1.5863732e+000,
		0.0000000e+000,
		-1.0606775e+001,
		-3.4047585e+000,
		-3.9341791e+000,
		0.0000000e+000,
		0.0000000e+000,
		0.0000000e+000,
		0.0000000e+000,
		2.2757890e+000,
		0.0000000e+000,
		0.0000000e+000,
		0.0000000e+000,
		0.0000000e+000,
		0.0000000e+000,
		0.0000000e+000,
		0.0000000e+000,
		4.5988870e+000,
		0.0000000e+000,
		0.0000000e+000,
		0.0000000e+000,
		0.0000000e+000,
		0.0000000e+000,
		0.0000000e+000,
		0.0000000e+000,
		6.2988415e+000,
		0.0000000e+000,
		0.0000000e+000,
		0.0000000e+000,
		0.0000000e+000,
		0.0000000e+000,
		0.0000000e+000,
		0.0000000e+000,
		0.0000000e+000,
		0.0000000e+000,
		0.0000000e+000,
		0.0000000e+000,
		0.0000000e+000,
	};
	MinLimits = float4(0.0000000e+000, 0.0000000e+000, 0.0000000e+000, 0.0000000e+000);
}
CParticleFieldDeclaration	$LOCAL$/CParticleFieldDeclaration_F920612A
{
	FieldName = "Brightness";
	TransformFilter = rotate;
}
CParticleDescriptor	$LOCAL$/CParticleDescriptor_D3B035EC
{
	CustomFields = 
	{
		"$LOCAL$/CParticleFieldDeclaration_45DAD51F",
	};
	SpawnEvaluator = "$LOCAL$/CCompilerSyntaxNodeExpression_4D947ACE";
	States = 
	{
		"$LOCAL$/CParticleState_173A2AA9",
	};
}
CParticleFieldDeclaration	$LOCAL$/CParticleFieldDeclaration_45DAD51F
{
	FieldName = "Normal";
	FieldType = float3;
	TransformFilter = rotate;
}
CCompilerSyntaxNodeExpression	$LOCAL$/CCompilerSyntaxNodeExpression_4D947ACE
{
	Expression = "function void	Eval()
{
	float3	normal = normalize(Sphere.samplePosition());
	float	rot_speed = RotationSpeed*0.3;
	float3	rot_normal = rotate(normal, float3(0,1,0), scene.Time * rot_speed);
	float	surface_velocity = length(normal.xz) * rot_speed;
	
	Position = rot_normal;
	Velocity = rot_normal * 0.5 + surface_velocity * cross(float3(0,1,0), rot_normal);

	float	killer = noise(Position*8);
	Life = select(0, 1, killer > 0.6);
}
";
}
CParticleState	$LOCAL$/CParticleState_173A2AA9
{
	StateName = "State_0";
	Evolvers = 
	{
		"$LOCAL$/CParticleEvolver_Physics_18165A20",
		"$LOCAL$/EjectionsB",
	};
}
CParticleEvolver_Physics	$LOCAL$/CParticleEvolver_Physics_18165A20
{
	Drag = 1.0000000e+000;
}
CParticleEvolver_Spawner	$LOCAL$/EjectionsB
{
	SpawnInterval = 4.9999999e-003;
	Descriptor = "$LOCAL$/CParticleDescriptor_6C4E1462";
}
CParticleDescriptor	$LOCAL$/CParticleDescriptor_6C4E1462
{
	InheritInitialVelocity = 5.0000000e-001;
	Renderer = "$LOCAL$/CParticleRenderer_Billboard_A5C439CD";
	CustomFields = 
	{
		"$LOCAL$/CParticleFieldDeclaration_EA284614",
		"$LOCAL$/CParticleFieldDeclaration_EA5807B6",
	};
	Samplers = 
	{
		"$LOCAL$/CParticleSamplerCurve_F214C5B1",
		"$LOCAL$/CParticleSamplerProceduralTurbulence_A42BAEAF",
		"$LOCAL$/CParticleSamplerShape_FBB28B9E",
	};
	SpawnEvaluator = "$LOCAL$/CCompilerSyntaxNodeExpression_27D00DC8";
	States = 
	{
		"$LOCAL$/CParticleState_10355C2B",
	};
}
CParticleRenderer_Billboard	$LOCAL$/CParticleRenderer_Billboard_A5C439CD
{
	Diffuse = "Textures/FX/bokeh_x3.dds";
	AtlasDefinition = "Textures/FX/bokeh_x3.pkat";
	SoftAnimationBlending = true;
	AxisScale = 2.0000000e-002;
}
CParticleFieldDeclaration	$LOCAL$/CParticleFieldDeclaration_EA284614
{
	FieldName = "Color";
	FieldType = float4;
}
CParticleEvolver_Physics	$LOCAL$/Evolver_2
{
	Drag = 1.5000000e+000;
	VelocityFieldSampler = "Turb";
}
CParticleFieldDeclaration	$LOCAL$/CParticleFieldDeclaration_EA5807B6
{
	FieldName = "Brightness";
	TransformFilter = rotate;
}
CParticleSamplerCurve	$LOCAL$/CParticleSamplerCurve_F214C5B1
{
	SamplerName = "ColorLookup";
	ValueType = Float4;
	Times = 
	{
		0.0000000e+000,
		1.4999999e-001,
		5.2199745e-001,
		7.0101136e-001,
		8.4999996e-001,
		1.0000000e+000,
	};
	FloatValues = 
	{
		2.9163778e+000,
		2.6652601e+000,
		2.3624818e+000,
		0.0000000e+000,
		1.1744095e+001,
		2.2664750e+000,
		1.9871552e+000,
		1.0000000e+000,
		2.9398355e+000,
		7.1825099e-001,
		3.9201516e-001,
		1.0000000e+000,
		2.9398355e+000,
		7.1825099e-001,
		3.9201516e-001,
		7.5591993e-001,
		2.9398355e+000,
		7.1825099e-001,
		3.9201516e-001,
		4.5081973e-001,
		2.9398355e+000,
		7.1825099e-001,
		3.9201516e-001,
		0.0000000e+000,
	};
	FloatTangents = 
	{
		0.0000000e+000,
		0.0000000e+000,
		0.0000000e+000,
		0.0000000e+000,
		0.0000000e+000,
		0.0000000e+000,
		0.0000000e+000,
		0.0000000e+000,
		-4.2769542e+000,
		-1.3728957e+000,
		-1.5863732e+000,
		0.0000000e+000,
		-1.0606775e+001,
		-3.4047585e+000,
		-3.9341791e+000,
		0.0000000e+000,
		0.0000000e+000,
		0.0000000e+000,
		0.0000000e+000,
		2.2757890e+000,
		0.0000000e+000,
		0.0000000e+000,
		0.0000000e+000,
		0.0000000e+000,
		0.0000000e+000,
		0.0000000e+000,
		0.0000000e+000,
		3.4609869e+000,
		0.0000000e+000,
		0.0000000e+000,
		0.0000000e+000,
		0.0000000e+000,
		0.0000000e+000,
		0.0000000e+000,
		0.0000000e+000,
		2.9182155e+000,
		0.0000000e+000,
		0.0000000e+000,
		0.0000000e+000,
		0.0000000e+000,
		0.0000000e+000,
		0.0000000e+000,
		0.0000000e+000,
		0.0000000e+000,
		0.0000000e+000,
		0.0000000e+000,
		0.0000000e+000,
		0.0000000e+000,
	};
	MinLimits = float4(0.0000000e+000, 0.0000000e+000, 0.0000000e+000, 0.0000000e+000);
}
CCompilerSyntaxNodeExpression	$LOCAL$/CCompilerSyntaxNodeExpression_27D00DC8
{
	Expression = "function void	Eval()
{
	Life = 1.0;
	float	spawnerAge = 1 - spawner.LifeRatio;
	
	Brightness = spawnerAge * (pow(ninja,4)*2 + 0.3);
	Velocity = StartVel.samplePosition() * spawnerAge;
}

function void	PostEval()
{
	float globeSide = dot(parent.Velocity, normalize(Position - ViewPosition));
	
	Brightness *= pow(BrightnessLookup.sample(globeSide * 0.5 + 0.5),3)*2;
}
";
}
CParticleState	$LOCAL$/CParticleState_10355C2B
{
	StateName = "State_0";
	Evolvers = 
	{
		"$LOCAL$/Evolver_2",
		"$LOCAL$/CParticleEvolver_Script_3DCAC8CA",
	};
}
CParticleEvolver_Script	$LOCAL$/CParticleEvolver_Script_3DCAC8CA
{
	Expression = "$LOCAL$/CCompilerSyntaxNodeExpression_0B335255";
}
CCompilerSyntaxNodeExpression	$LOCAL$/CCompilerSyntaxNodeExpression_0B335255
{
	Expression = "function void	Eval()
{
	Color = ColorLookup.sample(LifeRatio) * Brightness;

	float	realSize = 0.004;

	float	distToView = dot(Position - ViewPosition, ViewDirection);
	float	dofSignedDist = distToView - FocusDistance;
	float	dofDist = abs(dofSignedDist);
	
	float	dofFactor = min(1, max(0, dofDist - FocusRange.y) / FocusRange.x);
	float	dofFactorNonLin = pow(dofFactor,2);

	float	cocFactor = dofFactorNonLin;
	float	cocScale = distToView * cocFactor;
	
	float	newSize = realSize + cocScale * MaxCocRadius;
	float	areaDiffusion = pow(realSize / newSize, 2);
	
//	float	cocBias = sqrt(min(realSize / (newSize - realSize), 100));	// hack
	TextureID = 3*cocFactor;// + 2*cocBias;
	
	Size = newSize;
	Color *= (areaDiffusion).111x;
}
";
}
CActionFactoryParticleSpawnerBase	$LOCAL$/EjectionsBRoot
{
	Descriptor = "$LOCAL$/CParticleDescriptor_D3B035EC";
	Infinite = true;
	DurationInSeconds = 2.0000000e+000;
	SpawnCount = 5.0000000e+002;
}
CParticleSamplerProceduralTurbulence	$LOCAL$/CParticleSamplerProceduralTurbulence_A42BAEAF
{
	SamplerName = "Turb";
	Wavelength = 3.9999999e-002;
	Strength = 4.5254830e-002;
	Lacunarity = 5.0000000e-001;
	Gain = 5.0000000e-001;
}
CParticleSamplerShape	$LOCAL$/CParticleSamplerShape_FBB28B9E
{
	SamplerName = "StartVel";
	Shape = "$LOCAL$/CShapeDescriptor_0C4623B9";
	SampleDimensionality = Volume;
}
CShapeDescriptor	$LOCAL$/CShapeDescriptor_0C4623B9
{
	ShapeType = SPHERE;
	Radius = 5.0000001e-002;
}
CParticleFieldDeclaration	$LOCAL$/CParticleFieldDeclaration_11764070
{
	FieldName = "BasePosition";
	FieldType = float3;
	TransformFilter = full;
}
CParticleFieldDeclaration	$LOCAL$/CParticleFieldDeclaration_5D70AFF3
{
	FieldName = "Offset";
}
CParticleFieldDeclaration	$LOCAL$/CParticleFieldDeclaration_EC634432
{
	FieldName = "NormalForAlignment";
	FieldType = float3;
	TransformFilter = rotate;
}
CParticleRenderer_Billboard	$LOCAL$/CParticleRenderer_Billboard_BD8C86EB
{
	Diffuse = "Textures/FX/bokeh_x3.dds";
	AtlasDefinition = "Textures/FX/bokeh_x3.pkat";
	SoftAnimationBlending = true;
}
CParticleEvolver_Script	$LOCAL$/Script_10
{
	Expression = "$LOCAL$/CCompilerSyntaxNodeExpression_68C7EA8A";
}
CCompilerSyntaxNodeExpression	$LOCAL$/CCompilerSyntaxNodeExpression_68C7EA8A
{
	Expression = "function void	Eval()
{
	float3	rot_normal = rotate(Normal, float3(0,1,0), scene.Time*RotationSpeed*0.3);
	Position = rot_normal;
	
	GlobeSide = dot(rot_normal, normalize(Position - ViewPosition));
	
	float	realSize = 0.01;

	float	distToView = dot(Position - ViewPosition, ViewDirection);
	float	dofSignedDist = distToView - FocusDistance;
	float	dofDist = abs(dofSignedDist);
	
	float	dofFactor = min(1, max(0, dofDist - FocusRange.y) / FocusRange.x);
	float	dofFactorNonLin = pow(dofFactor,2);

	float	cocFactor = dofFactorNonLin;
	float	cocScale = distToView * cocFactor;
	
	float	newSize = realSize + cocScale * MaxCocRadius;
	float	areaDiffusion = pow(realSize / newSize, 2);
	
//	float	cocBias = sqrt(min(realSize / (newSize - realSize), 100));	// hack
	TextureID = 3*cocFactor;// + 2*cocBias;
	
	Size = newSize;
	Color *= (areaDiffusion * pow(BrightnessLookup.sample(GlobeSide),3)).111x;
}
";
}
CParticleFieldDeclaration	$LOCAL$/CParticleFieldDeclaration_9C423715
{
	FieldName = "Color";
	FieldType = float4;
}
CParticleEvolver_Field	$LOCAL$/Field_1
{
	Name = "Color";
	Evaluator = "$LOCAL$/CParticleSamplerCurve_9FFBE8FC";
}
CParticleSamplerCurve	$LOCAL$/CParticleSamplerCurve_9FFBE8FC
{
	ValueType = Float4;
	Times = 
	{
		0.0000000e+000,
		1.4999999e-001,
		8.4999996e-001,
		1.0000000e+000,
	};
	FloatValues = 
	{
		2.4538883e+001,
		1.1266411e+001,
		3.9067326e+000,
		0.0000000e+000,
		2.3896446e+001,
		8.2070723e+000,
		3.7860413e+000,
		1.0000000e+000,
		6.7579651e-001,
		6.7579651e-001,
		4.4231093e-001,
		1.0000000e+000,
		0.0000000e+000,
		0.0000000e+000,
		4.4231093e-001,
		0.0000000e+000,
	};
	FloatTangents = 
	{
		0.0000000e+000,
		0.0000000e+000,
		0.0000000e+000,
		0.0000000e+000,
		0.0000000e+000,
		-5.0751700e+000,
		0.0000000e+000,
		0.0000000e+000,
		-4.0520067e+000,
		-2.3476369e+000,
		-3.9986399e-001,
		0.0000000e+000,
		-1.8909367e+001,
		-1.0955640e+001,
		-1.8660320e+000,
		0.0000000e+000,
		-2.8779988e+000,
		-2.8779988e+000,
		0.0000000e+000,
		0.0000000e+000,
		-6.1671418e-001,
		-6.1671418e-001,
		0.0000000e+000,
		0.0000000e+000,
		0.0000000e+000,
		0.0000000e+000,
		0.0000000e+000,
		0.0000000e+000,
		0.0000000e+000,
		0.0000000e+000,
		0.0000000e+000,
		0.0000000e+000,
	};
	MinLimits = float4(0.0000000e+000, 0.0000000e+000, 0.0000000e+000, 0.0000000e+000);
}
CParticleDescriptor	$LOCAL$/CParticleDescriptor_8C042C64
{
	CustomFields = 
	{
		"$LOCAL$/CParticleFieldDeclaration_FE4250F7",
	};
	SpawnEvaluator = "$LOCAL$/CCompilerSyntaxNodeExpression_FC093786";
	States = 
	{
		"$LOCAL$/CParticleState_0D92C9C1",
	};
}
CParticleFieldDeclaration	$LOCAL$/CParticleFieldDeclaration_FE4250F7
{
	FieldName = "Normal";
	FieldType = float3;
	TransformFilter = rotate;
}
CCompilerSyntaxNodeExpression	$LOCAL$/CCompilerSyntaxNodeExpression_FC093786
{
	Expression = "function void	Eval()
{
	Position = Sphere.samplePosition();
	Velocity = normalize(Position);

//	float	killer = noise(Position*8);
	Life = 2;//select(0, 2, killer > 0.6);
}
";
}
CParticleState	$LOCAL$/CParticleState_0D92C9C1
{
	StateName = "State_0";
	Evolvers = 
	{
		"$LOCAL$/CParticleEvolver_Physics_BF355B18",
		"$LOCAL$/EjectionsC",
	};
}
CParticleEvolver_Physics	$LOCAL$/CParticleEvolver_Physics_BF355B18
{
	Drag = 2.0000000e+000;
}
CParticleEvolver_Spawner	$LOCAL$/EjectionsC
{
	SpawnInterval = 4.9999999e-003;
	Descriptor = "$LOCAL$/CParticleDescriptor_49DB679A";
}
CParticleDescriptor	$LOCAL$/CParticleDescriptor_49DB679A
{
	Renderer = "$LOCAL$/CParticleRenderer_Billboard_1ABDF165";
	CustomFields = 
	{
		"$LOCAL$/CParticleFieldDeclaration_F3FA098C",
		"$LOCAL$/CParticleFieldDeclaration_2359613F",
		"$LOCAL$/CParticleFieldDeclaration_73A79B68",
	};
	Samplers = 
	{
		"$LOCAL$/CParticleSamplerCurve_C011E96E",
		"$LOCAL$/CParticleSamplerShape_2D62CBC0",
	};
	SpawnEvaluator = "$LOCAL$/CCompilerSyntaxNodeExpression_5B97B102";
	States = 
	{
		"$LOCAL$/CParticleState_2FE9C2ED",
	};
}
CParticleRenderer_Billboard	$LOCAL$/CParticleRenderer_Billboard_1ABDF165
{
	Diffuse = "Textures/FX/bokeh_x3.dds";
	AtlasDefinition = "Textures/FX/bokeh_x3.pkat";
	SoftAnimationBlending = true;
	AxisScale = 2.0000000e-002;
}
CParticleFieldDeclaration	$LOCAL$/CParticleFieldDeclaration_F3FA098C
{
	FieldName = "Color";
	FieldType = float4;
}
CParticleFieldDeclaration	$LOCAL$/CParticleFieldDeclaration_2359613F
{
	FieldName = "Brightness";
	TransformFilter = rotate;
}
CParticleSamplerCurve	$LOCAL$/CParticleSamplerCurve_C011E96E
{
	SamplerName = "ColorLookup";
	ValueType = Float4;
	Times = 
	{
		0.0000000e+000,
		9.9999994e-002,
		1.0000000e+000,
	};
	FloatValues = 
	{
		1.7641876e+000,
		2.6652601e+000,
		3.3529823e+000,
		0.0000000e+000,
		2.0641470e+000,
		2.9229770e+000,
		5.3946476e+000,
		4.0939844e-001,
		2.3242331e-001,
		2.9226631e-001,
		3.9201516e-001,
		0.0000000e+000,
	};
	FloatTangents = 
	{
		0.0000000e+000,
		0.0000000e+000,
		0.0000000e+000,
		0.0000000e+000,
		0.0000000e+000,
		1.0643352e+000,
		5.5133843e+000,
		0.0000000e+000,
		-6.7306662e-001,
		-8.5528713e-001,
		-1.4452703e+000,
		-9.0276480e-002,
		-6.0576000e+000,
		-7.6975842e+000,
		-1.3007433e+001,
		-8.1248838e-001,
		-1.6789259e-001,
		0.0000000e+000,
		0.0000000e+000,
		0.0000000e+000,
		0.0000000e+000,
		0.0000000e+000,
		0.0000000e+000,
		0.0000000e+000,
	};
	MinLimits = float4(0.0000000e+000, 0.0000000e+000, 0.0000000e+000, 0.0000000e+000);
}
CActionFactoryParticleSpawnerBase	$LOCAL$/EjectionsCRoot
{
	Descriptor = "$LOCAL$/CParticleDescriptor_8C042C64";
	Infinite = true;
	DurationInSeconds = 2.0000000e+000;
	SpawnCount = 1.0000000e+002;
}
CParticleSamplerShape	$LOCAL$/CParticleSamplerShape_2D62CBC0
{
	SamplerName = "StartVel";
	Shape = "$LOCAL$/CShapeDescriptor_8D577583";
	SampleDimensionality = Volume;
}
CShapeDescriptor	$LOCAL$/CShapeDescriptor_8D577583
{
	ShapeType = SPHERE;
	Radius = 5.0000001e-002;
}
CCompilerSyntaxNodeExpression	$LOCAL$/CCompilerSyntaxNodeExpression_5B97B102
{
	Expression = "function void	Eval()
{
	Life = 1.0;
	float	spawnerAge = 1 - spawner.LifeRatio;
	Brightness = spawnerAge * (pow(ninja,4)*0.5 + 0.5);
//	Velocity = StartVel.samplePosition() * spawnerAge;
	SizeCoeff = pow(spawnerAge,2) + 0.3;
}
";
}
CParticleState	$LOCAL$/CParticleState_2FE9C2ED
{
	StateName = "State_0";
	Evolvers = 
	{
		"$LOCAL$/CParticleEvolver_Script_699C2C87",
	};
}
CCompilerSyntaxNodeExpression	$LOCAL$/CCompilerSyntaxNodeExpression_E1837256
{
	Expression = "function void	Eval()
{
	Color = ColorLookup.sample(LifeRatio) * Brightness;

	float	realSize = 0.004 * SizeCoeff;

	float	distToView = dot(Position - ViewPosition, ViewDirection);
	float	dofSignedDist = distToView - FocusDistance;
	float	dofDist = abs(dofSignedDist);
	
	float	dofFactor = min(1, max(0, dofDist - FocusRange.y) / FocusRange.x);
	float	dofFactorNonLin = pow(dofFactor,2);

	float	cocFactor = dofFactorNonLin;
	float	cocScale = distToView * cocFactor;
	
	float	newSize = realSize + cocScale * MaxCocRadius;
	float	areaDiffusion = pow(realSize / newSize, 2);
	
//	float	cocBias = sqrt(min(realSize / (newSize - realSize), 100));	// hack
	TextureID = 3*cocFactor;// + 2*cocBias;
	
	Size = newSize;
	Color *= (areaDiffusion).111x;
}
";
}
CParticleEvolver_Script	$LOCAL$/CParticleEvolver_Script_699C2C87
{
	Expression = "$LOCAL$/CCompilerSyntaxNodeExpression_E1837256";
}
CParticleFieldDeclaration	$LOCAL$/CParticleFieldDeclaration_73A79B68
{
	FieldName = "SizeCoeff";
}
CParticleDescriptor	$LOCAL$/CParticleDescriptor_E268ABE1
{
	Renderer = "$LOCAL$/CParticleRenderer_Billboard_A391D7B8";
	CustomFields = 
	{
		"$LOCAL$/CParticleFieldDeclaration_B404F4DB",
		"$LOCAL$/CParticleFieldDeclaration_8080F73A",
	};
	Samplers = 
	{
		"$LOCAL$/CParticleSamplerCurve_5892542C",
	};
	SpawnEvaluator = "$LOCAL$/CCompilerSyntaxNodeExpression_667C305F";
	States = 
	{
		"$LOCAL$/CParticleState_6217570E",
	};
}
CParticleRenderer_Billboard	$LOCAL$/CParticleRenderer_Billboard_A391D7B8
{
	Diffuse = "Textures/FX/bokeh_x3.dds";
	AtlasDefinition = "Textures/FX/bokeh_x3.pkat";
	SoftAnimationBlending = true;
}
CParticleFieldDeclaration	$LOCAL$/CParticleFieldDeclaration_B404F4DB
{
	FieldName = "Color";
	FieldType = float4;
}
CParticleFieldDeclaration	$LOCAL$/CParticleFieldDeclaration_8080F73A
{
	FieldName = "BaseColor";
	FieldType = float4;
}
CParticleFieldDeclaration	$LOCAL$/CParticleFieldDeclaration_3C44704D
{
	FieldName = "GlobeSide";
}
CParticleSamplerCurve	$LOCAL$/CParticleSamplerCurve_5892542C
{
	SamplerName = "IntensityDecay";
	ValueType = Float2;
	Times = 
	{
		0.0000000e+000,
		1.0000000e+000,
	};
	FloatValues = 
	{
		4.1859448e-001,
		9.9981856e-001,
		0.0000000e+000,
		1.0439363e-001,
	};
	FloatTangents = 
	{
		0.0000000e+000,
		0.0000000e+000,
		-7.0464569e-001,
		-1.5952424e+000,
		0.0000000e+000,
		-3.3651337e-001,
		0.0000000e+000,
		0.0000000e+000,
	};
	MinLimits = float4(0.0000000e+000, 0.0000000e+000, 0.0000000e+000, 0.0000000e+000);
}
CCompilerSyntaxNodeExpression	$LOCAL$/CCompilerSyntaxNodeExpression_667C305F
{
	Expression = "function void	Eval()
{
	Life = parent.ChildLife*1.0;
	Size = 0.01;
	
	BaseColor = BrightnessLookup.sample(parent.GlobeSide * 0.5 + 0.5) * 0.5 * parent.Color.rgb1;
	Color = BaseColor;
}

function void	PostEval()
{
	float3	rot_normal = rotate(parent.Normal, float3(0,1,0), scene.Time*RotationSpeed*0.3);
	Velocity = rot_normal * 0.2;
}
";
}
CParticleState	$LOCAL$/CParticleState_6217570E
{
	StateName = "State_0";
	Evolvers = 
	{
		"$LOCAL$/CParticleEvolver_Physics_E18C1BE9",
		"$LOCAL$/CParticleEvolver_Script_E72A8460",
		"$LOCAL$/CParticleEvolver_Script_F08B9CA2",
	};
}
CParticleEvolver_Physics	$LOCAL$/CParticleEvolver_Physics_E18C1BE9
{
}
CParticleEvolver_Script	$LOCAL$/CParticleEvolver_Script_E72A8460
{
	Expression = "$LOCAL$/CCompilerSyntaxNodeExpression_C2874AA3";
}
CCompilerSyntaxNodeExpression	$LOCAL$/CCompilerSyntaxNodeExpression_C2874AA3
{
	Expression = "function void	Eval()
{
	float2	n = IntensityDecay.sample(LifeRatio);
	Color = BaseColor * n.x;
	Size = 0.02 * n.y;
}
";
}
CParticleEvolver_Script	$LOCAL$/CParticleEvolver_Script_F08B9CA2
{
	Expression = "$LOCAL$/CCompilerSyntaxNodeExpression_23D0470D";
}
CCompilerSyntaxNodeExpression	$LOCAL$/CCompilerSyntaxNodeExpression_23D0470D
{
	Expression = "function void	Eval()
{
	float	distToView = dot(Position - ViewPosition, ViewDirection);
	float	dofSignedDist = distToView - FocusDistance;
	float	dofDist = abs(dofSignedDist);
	
	float	dofFactor = min(1, max(0, dofDist - FocusRange.y) / FocusRange.x);
	float	dofFactorNonLin = pow(dofFactor,2);

	float	cocFactor = dofFactorNonLin;
	float	cocScale = distToView * cocFactor;
	
	float	realSize = Size;
	float	newSize = realSize + cocScale * MaxCocRadius;
	float	areaDiffusion = pow(realSize / newSize, 2);
	
//	float	cocBias = sqrt(min(realSize / (newSize - realSize), 100));	// hack
	TextureID = 3*cocFactor;// + 2*cocBias;
	
	Size = newSize;
	Color *= (areaDiffusion).111x;
}
";
}
CParticleEvolver_Spawner	$LOCAL$/Beacon2
{
	EditorInfosIsBlockMinimized = 0;
	SpawnMetric = Time;
	SpawnInterval = 3.9999999e-002;
	CustomSpawnIntervalScaleField = "SpawnMetricScale2";
	Descriptor = "$LOCAL$/CParticleDescriptor_E268ABE1";
}
CParticleFieldDeclaration	$LOCAL$/CParticleFieldDeclaration_6EFB27A7
{
	FieldName = "SpawnMetricScale2";
}
CParticleDescriptor	$LOCAL$/CParticleDescriptor_EDD429FD
{
	Renderer = "$LOCAL$/CParticleRenderer_Billboard_398BFBA2";
	CustomFields = 
	{
		"$LOCAL$/CParticleFieldDeclaration_DF616717",
		"$LOCAL$/CParticleFieldDeclaration_F50CF826",
		"$LOCAL$/CParticleFieldDeclaration_212B6354",
		"$LOCAL$/CParticleFieldDeclaration_E47D5AA7",
		"$LOCAL$/CParticleFieldDeclaration_EFE72AF6",
	};
	Samplers = 
	{
		"$LOCAL$/CParticleSamplerCurve_FD2B46E1",
	};
	SpawnEvaluator = "$LOCAL$/CCompilerSyntaxNodeExpression_3A2AF7DB";
	States = 
	{
		"$LOCAL$/CParticleState_F5CDB63A",
	};
}
CParticleFieldDeclaration	$LOCAL$/CParticleFieldDeclaration_E47D5AA7
{
	FieldName = "NormalForAlignment";
	FieldType = float3;
	TransformFilter = rotate;
}
CParticleFieldDeclaration	$LOCAL$/CParticleFieldDeclaration_DF616717
{
	FieldName = "Color";
	FieldType = float4;
}
CParticleFieldDeclaration	$LOCAL$/CParticleFieldDeclaration_F50CF826
{
	FieldName = "Brightness";
}
CParticleSamplerCurve	$LOCAL$/CParticleSamplerCurve_8163C3AE
{
	SamplerName = "IntensityFromParent";
	Times = 
	{
		0.0000000e+000,
		1.4999999e-001,
		8.4999996e-001,
		1.0000000e+000,
	};
	FloatValues = 
	{
		0.0000000e+000,
		1.0000000e+000,
		1.0000000e+000,
		0.0000000e+000,
	};
	FloatTangents = 
	{
		0.0000000e+000,
		0.0000000e+000,
		0.0000000e+000,
		0.0000000e+000,
		0.0000000e+000,
		0.0000000e+000,
		0.0000000e+000,
		0.0000000e+000,
	};
	MinLimits = float4(0.0000000e+000, 0.0000000e+000, 0.0000000e+000, 0.0000000e+000);
}
CParticleFieldDeclaration	$LOCAL$/CParticleFieldDeclaration_EFE72AF6
{
	FieldName = "Normal";
	FieldType = float3;
	TransformFilter = rotate;
}
CCompilerSyntaxNodeExpression	$LOCAL$/CCompilerSyntaxNodeExpression_3A2AF7DB
{
	Expression = "function void	Eval()
{
	Life = 1;
	Size = 0.01;
	
	Brightness = BrightnessLookupB.sample(parent.GlobeSide * 0.5 + 0.5);
	float3	rot_tangent = rotate(parent.Tangent, float3(0,1,0), scene.Time*RotationSpeed*0.3);

	Tangent = rot_tangent;
	Normal = parent.Normal;
	NormalForAlignment = Normal;
}
";
}
CParticleState	$LOCAL$/CParticleState_F5CDB63A
{
	StateName = "State_0";
	Evolvers = 
	{
		"$LOCAL$/CParticleEvolver_Script_FE8A660E",
	};
}
CParticleFieldDeclaration	$LOCAL$/CParticleFieldDeclaration_212B6354
{
	FieldName = "Tangent";
	FieldType = float3;
	TransformFilter = rotate;
}
CParticleEvolver_Spawner	$LOCAL$/Beacon3
{
	EditorInfosIsBlockMinimized = 0;
	SpawnMetric = Time;
	SpawnInterval = 5.0000000e-001;
	CustomSpawnIntervalScaleField = "SpawnMetricScale";
	Descriptor = "$LOCAL$/CParticleDescriptor_EDD429FD";
}
CActionFactoryParticleSpawnerBase	$LOCAL$/Orbiters
{
	EditorInfosIsBlockMinimized = 0;
	Descriptor = "$LOCAL$/CParticleDescriptor_F069AE6B";
	Infinite = true;
	DurationInSeconds = 2.0000000e+000;
	SpawnCount = 1.0000000e+001;
}
CParticleDescriptor	$LOCAL$/CParticleDescriptor_F069AE6B
{
	CustomFields = 
	{
		"$LOCAL$/CParticleFieldDeclaration_C7AFE6DE",
		"$LOCAL$/CParticleFieldDeclaration_4154FFF9",
		"$LOCAL$/CParticleFieldDeclaration_41B0DA33",
		"$LOCAL$/CParticleFieldDeclaration_AD759B72",
		"$LOCAL$/CParticleFieldDeclaration_BE7FC61D",
	};
	SpawnEvaluator = "$LOCAL$/CCompilerSyntaxNodeExpression_FA50680A";
	States = 
	{
		"$LOCAL$/CParticleState_5DA09A7C",
	};
}
CCompilerSyntaxNodeExpression	$LOCAL$/CCompilerSyntaxNodeExpression_FA50680A
{
	Expression = "function void	Eval()
{
	Life = 5.0;

	Radius = rand(1.3, 1.4);
	OrbitalCenter = 0;
	OrbitalSpeed = rand(0.5,2);
	RotationAxis = vrand();
	BasePosition = Sphere.samplePosition();
	Position = BasePosition * Radius;
}
";
}
CParticleFieldDeclaration	$LOCAL$/CParticleFieldDeclaration_1784B509
{
	FieldName = "Brightness";
}
CParticleState	$LOCAL$/CParticleState_5DA09A7C
{
	StateName = "State_0";
	Evolvers = 
	{
		"$LOCAL$/Script_11",
		"$LOCAL$/OrbitalTrail",
	};
}
CParticleFieldDeclaration	$LOCAL$/CParticleFieldDeclaration_4154FFF9
{
	FieldName = "OrbitalCenter";
	FieldType = float3;
	TransformFilter = full;
}
CParticleFieldDeclaration	$LOCAL$/CParticleFieldDeclaration_C7AFE6DE
{
	FieldName = "Radius";
}
CParticleEvolver_Script	$LOCAL$/Script_11
{
	Expression = "$LOCAL$/CCompilerSyntaxNodeExpression_014431B0";
}
CCompilerSyntaxNodeExpression	$LOCAL$/CCompilerSyntaxNodeExpression_014431B0
{
	Expression = "function void	Eval()
{
	float3	v = BasePosition - OrbitalCenter;
	Position = rotate(v, RotationAxis, LifeRatio * OrbitalSpeed) * Radius + OrbitalCenter;
}
";
}
CParticleFieldDeclaration	$LOCAL$/CParticleFieldDeclaration_41B0DA33
{
	FieldName = "OrbitalSpeed";
	TransformFilter = full;
}
CParticleFieldDeclaration	$LOCAL$/CParticleFieldDeclaration_AD759B72
{
	FieldName = "BasePosition";
	FieldType = float3;
	TransformFilter = full;
}
CParticleFieldDeclaration	$LOCAL$/CParticleFieldDeclaration_BE7FC61D
{
	FieldName = "RotationAxis";
	FieldType = float3;
	TransformFilter = rotate;
}
CParticleEvolver_Spawner	$LOCAL$/OrbitalTrail
{
	SpawnMetric = Time;
	SpawnInterval = 7.0000000e-002;
	Descriptor = "$LOCAL$/CParticleDescriptor_5E4EBA37";
}
CParticleState	$LOCAL$/CParticleState_6C99A0A4
{
	StateName = "State_0";
	Evolvers = 
	{
		"$LOCAL$/CParticleEvolver_Physics_8585FB58",
		"$LOCAL$/Field_2",
		"$LOCAL$/Field_3",
		"$LOCAL$/Script_12",
	};
}
CParticleDescriptor	$LOCAL$/CParticleDescriptor_5E4EBA37
{
	Renderer = "$LOCAL$/CParticleRenderer_Ribbon_545410FB";
	CustomFields = 
	{
		"$LOCAL$/CParticleFieldDeclaration_BDB9BCA5",
		"$LOCAL$/CParticleFieldDeclaration_1784B509",
	};
	Samplers = 
	{
		"$LOCAL$/CParticleSamplerCurve_8163C3AE",
	};
	SpawnEvaluator = "$LOCAL$/CCompilerSyntaxNodeExpression_F5AD39C6";
	States = 
	{
		"$LOCAL$/CParticleState_6C99A0A4",
	};
}
CCompilerSyntaxNodeExpression	$LOCAL$/CCompilerSyntaxNodeExpression_F5AD39C6
{
	Expression = "function void	Eval()
{
	Life = 3.0;
	Brightness = IntensityFromParent.sample(spawner.LifeRatio);
}
";
}
CParticleEvolver_Physics	$LOCAL$/CParticleEvolver_Physics_8585FB58
{
}
CParticleRenderer_Ribbon	$LOCAL$/CParticleRenderer_Ribbon_545410FB
{
	Quality = CorrectDeformation;
	Diffuse = "Textures/FX/SymmetricGradient.dds";
}
CParticleEvolver_Field	$LOCAL$/Field_2
{
	Name = "Size";
	Evaluator = "$LOCAL$/CParticleSamplerCurve_DED235DA";
}
CParticleSamplerCurve	$LOCAL$/CParticleSamplerCurve_DED235DA
{
	Times = 
	{
		0.0000000e+000,
		6.4449018e-001,
		1.0000000e+000,
	};
	FloatValues = 
	{
		2.8440729e-003,
		2.7319458e-003,
		1.4881594e-003,
	};
	FloatTangents = 
	{
		0.0000000e+000,
		0.0000000e+000,
		-4.1499903e-004,
		-2.2891928e-004,
		-2.5134892e-003,
		0.0000000e+000,
	};
	MinLimits = float4(0.0000000e+000, 0.0000000e+000, 0.0000000e+000, 0.0000000e+000);
}
CParticleFieldDeclaration	$LOCAL$/CParticleFieldDeclaration_BDB9BCA5
{
	FieldName = "Color";
	FieldType = float4;
}
CParticleEvolver_Script	$LOCAL$/Script_12
{
	Expression = "$LOCAL$/CCompilerSyntaxNodeExpression_E3B015CC";
}
CCompilerSyntaxNodeExpression	$LOCAL$/CCompilerSyntaxNodeExpression_E3B015CC
{
	Expression = "function void	Eval()
{
	float	realSize = Size;

	float	distToView = dot(Position - ViewPosition, ViewDirection);
	float	dofSignedDist = distToView - FocusDistance;
	float	dofDist = abs(dofSignedDist);
	
	float	dofFactor = min(1, max(0, dofDist - FocusRange.y) / FocusRange.x);
	float	dofFactorNonLin = pow(dofFactor,2);

	float	cocFactor = dofFactorNonLin;
	float	cocScale = distToView * cocFactor;
	
	float	newSize = realSize + cocScale * MaxCocRadius;
	float	areaDiffusion = pow(realSize / newSize, 2);
	
//	float	cocBias = sqrt(min(realSize / (newSize - realSize), 100));	// hack
//	TextureID = 3*(1-cocFactor) + 2*cocBias;
	
	Size = newSize;
	Color *= (areaDiffusion * Brightness).111x;

}
";
}
CParticleEvolver_Field	$LOCAL$/Field_3
{
	Name = "Color";
	Evaluator = "$LOCAL$/CParticleSamplerCurve_F246427F";
}
CParticleSamplerCurve	$LOCAL$/CParticleSamplerCurve_F246427F
{
	ValueType = Float4;
	Times = 
	{
		0.0000000e+000,
		1.4000000e-001,
		1.9999999e-001,
		3.0444479e-001,
		1.0000000e+000,
	};
	FloatValues = 
	{
		1.0060196e+001,
		2.0777390e+000,
		1.3129573e+000,
		0.0000000e+000,
		7.7634506e+000,
		1.4971840e+000,
		8.9440536e-001,
		0.0000000e+000,
		5.7805824e+000,
		8.9126706e-001,
		4.0160751e-001,
		1.0000000e+000,
		3.5002253e+000,
		4.2479122e-001,
		2.1543777e-001,
		9.3789560e-001,
		0.0000000e+000,
		0.0000000e+000,
		0.0000000e+000,
		0.0000000e+000,
	};
	FloatTangents = 
	{
		0.0000000e+000,
		0.0000000e+000,
		0.0000000e+000,
		0.0000000e+000,
		0.0000000e+000,
		0.0000000e+000,
		0.0000000e+000,
		0.0000000e+000,
		-3.6803215e+000,
		-1.2696042e+000,
		-1.1508957e+000,
		0.0000000e+000,
		-1.5772803e+000,
		-5.4411596e-001,
		-4.9324095e-001,
		0.0000000e+000,
		-1.7730097e+000,
		-6.2815058e-001,
		-2.9245612e-001,
		0.0000000e+000,
		-3.0863614e+000,
		-1.0934513e+000,
		-5.0909209e-001,
		0.0000000e+000,
		-1.1740727e+000,
		-1.1056978e-001,
		-2.2451829e-002,
		-9.7742662e-002,
		-7.8187947e+000,
		-7.3634481e-001,
		-1.4951906e-001,
		-6.5092194e-001,
		0.0000000e+000,
		0.0000000e+000,
		0.0000000e+000,
		0.0000000e+000,
		0.0000000e+000,
		0.0000000e+000,
		0.0000000e+000,
		0.0000000e+000,
	};
	MinLimits = float4(0.0000000e+000, 0.0000000e+000, 0.0000000e+000, 0.0000000e+000);
}
CParticleSamplerCurve	$LOCAL$/CParticleSamplerCurve_FD2B46E1
{
	SamplerName = "BrightnessLookupB";
	Times = 
	{
		0.0000000e+000,
		2.9999998e-001,
		6.9999999e-001,
		1.0000000e+000,
	};
	FloatValues = 
	{
		1.0000000e+000,
		1.0000000e+000,
		9.4338179e-002,
		9.4338179e-002,
	};
	FloatTangents = 
	{
		0.0000000e+000,
		0.0000000e+000,
		0.0000000e+000,
		0.0000000e+000,
		0.0000000e+000,
		0.0000000e+000,
		0.0000000e+000,
		0.0000000e+000,
	};
	MinLimits = float4(0.0000000e+000, 0.0000000e+000, 0.0000000e+000, 0.0000000e+000);
}
CParticleFieldDeclaration	$LOCAL$/CParticleFieldDeclaration_E6E72A7F
{
	FieldName = "BaseSize";
}
CActionFactoryWithChilds	$LOCAL$/Land
{
	ChildList = 
	{
		"$LOCAL$/MainLandRoot",
		"$LOCAL$/OutlinesRoot",
		"$LOCAL$/OuterShellRoot",
	};
}
CActionFactoryWithChilds	$LOCAL$/Detail
{
	ChildList = 
	{
		"$LOCAL$/HotspotsRoot",
		"$LOCAL$/EjectionsARoot",
		"$LOCAL$/EjectionsBRoot",
		"$LOCAL$/EjectionsCRoot",
		"$LOCAL$/Orbiters",
	};
}
